{"data":[{"id":"Bandit_B101","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"assert_used","description":"B101: Test for use of assert¶","explanation":"## B101: Test for use of assert[¶](#b101-test-for-use-of-assert \"Permalink to this headline\")\n\nThis plugin test checks for the use of the Python `assert` keyword. It\nwas discovered that some projects used assert to enforce interface\nconstraints. However, assert is removed with compiling to optimised byte\ncode (python -o producing \\*.pyo files). This caused various protections\nto be removed. Consider raising a semantically meaningful error or\n`AssertionError` instead.\n\nPlease see\n<https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement>\nfor more info on `assert`.\n\n**Config Options:**\n\nYou can configure files that skip this check. This is often useful when\nyou use assert statements in test cases."},{"id":"Bandit_B102","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"exec_used","subCategory":"InputValidation","description":"B102: Test for the use of exec¶","explanation":"## B102: Test for the use of exec[¶](#b102-test-for-the-use-of-exec \"Permalink to this headline\")\n\nThis plugin test checks for the use of Python’s exec method or keyword.\nThe Python docs succinctly describe why the use of exec is risky."},{"id":"Bandit_B103","category":"Security","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"set_bad_file_permissions","subCategory":"FileAccess","description":"B103: Test for setting permissive file permissions¶","explanation":"## B103: Test for setting permissive file permissions[¶](#b103-test-for-setting-permissive-file-permissions \"Permalink to this headline\")\n\nPOSIX based operating systems utilize a permissions model to protect\naccess to parts of the file system. This model supports three roles\n“owner”, “group” and “world” each role may have a combination of\n“read”, “write” or “execute” flags sets. Python provides `chmod` to\nmanipulate POSIX style permissions.\n\nThis plugin test looks for the use of `chmod` and will alert when it is\nused to set particularly permissive control flags. A MEDIUM warning is\ngenerated if a file is set to group executable and a HIGH warning is\nreported if a file is set world writable. Warnings are given with HIGH\nconfidence."},{"id":"Bandit_B104","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"hardcoded_bind_all_interfaces","description":"B104: Test for binding to all interfaces¶","explanation":"## B104: Test for binding to all interfaces[¶](#b104-test-for-binding-to-all-interfaces \"Permalink to this headline\")\n\nBinding to all network interfaces can potentially open up a service to\ntraffic on unintended interfaces, that may not be properly documented or\nsecured. This plugin test looks for a string pattern “0.0.0.0” that may\nindicate a hardcoded binding to all network interfaces."},{"id":"Bandit_B105","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"hardcoded_password_string","subCategory":"Auth","description":"B105: Test for use of hard-coded password strings","explanation":"**B105: Test for use of hard-coded password strings**\n\nThe use of hard-coded passwords increases the possibility of password\nguessing tremendously. This plugin test looks for all string literals\nand checks the following conditions:\n\n  - assigned to a variable that looks like a password\n\n  - assigned to a dict key that looks like a password\n\n  - used in a comparison with a variable that looks like a password\n\nVariables are considered to look like a password if they have match any\none of:\n\n  - “password”\n\n  - “pass”\n\n  - “passwd”\n\n  - “pwd”\n\n  - “secret”\n\n  - “token”\n\n  - “secrete”\n\nNote: this can be noisy and may generate false positives.\n\n**Config Options:**\n\nNone\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: Possible hardcoded password '(root)'\n       Severity: Low   Confidence: Low\n       Location: ./examples/hardcoded-passwords.py:5\n    4 def someFunction2(password):\n    5     if password == \"root\":\n    6         print(\"OK, logged in\")\n\nSee also\n\n  - <https://www.owasp.org/index.php/Use_of_hard-coded_password>\n\nNew in version 0.9.0."},{"id":"Bandit_B106","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"hardcoded_password_funcarg","subCategory":"Auth","description":"B106: Test for use of hard-coded password function arguments","explanation":"**B106: Test for use of hard-coded password function arguments**\n\nThe use of hard-coded passwords increases the possibility of password\nguessing tremendously. This plugin test looks for all function calls\nbeing passed a keyword argument that is a string literal. It checks that\nthe assigned local variable does not look like a password.\n\nVariables are considered to look like a password if they have match any\none of:\n\n  - “password”\n\n  - “pass”\n\n  - “passwd”\n\n  - “pwd”\n\n  - “secret”\n\n  - “token”\n\n  - “secrete”\n\nNote: this can be noisy and may generate false positives.\n\n**Config Options:**\n\nNone\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded\n    password: 'blerg'\n       Severity: Low   Confidence: Medium\n       Location: ./examples/hardcoded-passwords.py:16\n    15\n    16    doLogin(password=\"blerg\")\n\nSee also\n\n  - <https://www.owasp.org/index.php/Use_of_hard-coded_password>\n\nNew in version 0.9.0."},{"id":"Bandit_B107","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"hardcoded_password_default","subCategory":"Auth","description":"B107: Test for use of hard-coded password argument defaults","explanation":"**B107: Test for use of hard-coded password argument defaults**\n\nThe use of hard-coded passwords increases the possibility of password\nguessing tremendously. This plugin test looks for all function\ndefinitions that specify a default string literal for some argument. It\nchecks that the argument does not look like a password.\n\nVariables are considered to look like a password if they have match any\none of:\n\n  - “password”\n\n  - “pass”\n\n  - “passwd”\n\n  - “pwd”\n\n  - “secret”\n\n  - “token”\n\n  - “secrete”\n\nNote: this can be noisy and may generate false positives.\n\n**Config Options:**\n\nNone\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: [B107:hardcoded_password_default] Possible hardcoded\n    password: 'Admin'\n       Severity: Low   Confidence: Medium\n       Location: ./examples/hardcoded-passwords.py:1\n    \n    1    def someFunction(user, password=\"Admin\"):\n    2      print(\"Hi \" + user)\n\nSee also\n\n  - <https://www.owasp.org/index.php/Use_of_hard-coded_password>\n\nNew in version 0.9.0."},{"id":"Bandit_B108","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"hardcoded_tmp_directory","subCategory":"FileAccess","description":"B108: Test for insecure usage of tmp file/directory¶","explanation":"## B108: Test for insecure usage of tmp file/directory[¶](#b108-test-for-insecure-usage-of-tmp-file-directory \"Permalink to this headline\")\n\nSafely creating a temporary file or directory means following a number\nof rules (see the references for more details). This plugin test looks\nfor strings starting with (configurable) commonly used temporary paths,\nfor example:\n\n**Config Options:**\n\nThis test plugin takes a similarly named config block,\nhardcoded\\_tmp\\_directory. The config block provides a Python list,\ntmp\\_dirs, that lists string fragments indicating possible temporary\nfile paths. Any string starting with one of these fragments will report\na MEDIUM confidence issue."},{"id":"Bandit_B109","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Test for a password based config option not marked secret","subCategory":"Auth","description":"B109: Test for a password based config option not marked secret¶","explanation":"# B109: Test for a password based config option not marked secret[¶](#b109-test-for-a-password-based-config-option-not-marked-secret \"Permalink to this headline\")\n\nThis plugin has been removed.\n\nPasswords are sensitive and must be protected appropriately. In\nOpenStack Oslo there is an option to mark options “secret” which will\nensure that they are not logged. This plugin detects usages of oslo\nconfiguration functions that appear to deal with strings ending in\n‘password’ and flag usages where they have not been marked secret.\n\nIf such a value is found a MEDIUM severity error is generated. If\n‘False’ or ‘None’ are explicitly set, Bandit will return a MEDIUM\nconfidence issue. If Bandit can’t determine the value of secret it will\nreturn a LOW confidence issue."},{"id":"Bandit_B110","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"try_except_pass","description":"B110: Test for a pass in the except block¶","explanation":"## B110: Test for a pass in the except block[¶](#b110-test-for-a-pass-in-the-except-block \"Permalink to this headline\")\n\nErrors in Python code bases are typically communicated using\n`Exceptions`. An exception object is ‘raised’ in the event of an error\nand can be ‘caught’ at a later point in the program, typically some\nerror handling or logging action will then be performed.\n\nHowever, it is possible to catch an exception and silently ignore it.\nThis is illustrated with the following example\n\nThis pattern is considered bad practice in general, but also represents\na potential security issue. A larger than normal volume of errors from a\nservice can indicate an attempt is being made to disrupt or interfere\nwith it. Thus errors should, at the very least, be logged.\n\nThere are rare situations where it is desirable to suppress errors, but\nthis is typically done with specific exception types, rather than the\nbase Exception class (or no type). To accommodate this, the test may be\nconfigured to ignore ‘try, except, pass’ where the exception is typed.\nFor example, the following would not generate a warning if the\nconfiguration option `checked_typed_exception` is set to False:\n\n**Config Options:**"},{"id":"Bandit_B111","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Test for the use of rootwrap running as root","subCategory":"Auth","description":"B111: Test for the use of rootwrap running as root¶","explanation":"# B111: Test for the use of rootwrap running as root[¶](#b111-test-for-the-use-of-rootwrap-running-as-root \"Permalink to this headline\")\n\nThis plugin has been removed.\n\nRunning commands as root dramatically increase their potential risk.\nRunning commands with restricted user privileges provides defense in\ndepth against command injection attacks, or developer and configuration\nerror. This plugin test checks for specific methods being called with a\nkeyword parameter run\\_as\\_root set to True, a common OpenStack idiom."},{"id":"Bandit_B112","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"try_except_continue","description":"B112: Test for a continue in the except block¶","explanation":"## B112: Test for a continue in the except block[¶](#b112-test-for-a-continue-in-the-except-block \"Permalink to this headline\")\n\nErrors in Python code bases are typically communicated using\n`Exceptions`. An exception object is ‘raised’ in the event of an error\nand can be ‘caught’ at a later point in the program, typically some\nerror handling or logging action will then be performed.\n\nHowever, it is possible to catch an exception and silently ignore it\nwhile in a loop. This is illustrated with the following example\n\nThis pattern is considered bad practice in general, but also represents\na potential security issue. A larger than normal volume of errors from a\nservice can indicate an attempt is being made to disrupt or interfere\nwith it. Thus errors should, at the very least, be logged.\n\nThere are rare situations where it is desirable to suppress errors, but\nthis is typically done with specific exception types, rather than the\nbase Exception class (or no type). To accommodate this, the test may be\nconfigured to ignore ‘try, except, continue’ where the exception is\ntyped. For example, the following would not generate a warning if the\nconfiguration option `checked_typed_exception` is set to False:\n\n**Config Options:**"},{"id":"Bandit_B201","category":"Security","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"flask_debug_true","description":"B201: Test for use of flask app with debug set to true¶","explanation":"## B201: Test for use of flask app with debug set to true[¶](#b201-test-for-use-of-flask-app-with-debug-set-to-true \"Permalink to this headline\")\n\nRunning Flask applications in debug mode results in the Werkzeug\ndebugger being enabled. This includes a feature that allows arbitrary\ncode execution. Documentation for both Flask [1](#id4) and Werkzeug\n[2](#id5) strongly suggests that debug mode should never be enabled on\nproduction systems.\n\nOperating a production server with debug mode enabled was the probable\ncause of the Patreon breach in 2015 [3](#id6)."},{"id":"Bandit_B301","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.","subCategory":"InsecureModulesLibraries","description":"B301: pickle¶","explanation":"### B301: pickle[¶](#b301-pickle \"Permalink to this headline\")\n\nPickle and modules that wrap it can be unsafe when used to deserialize\nuntrusted data, possible security issue.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B301</p></td>\n<td align=\"left\"><p>pickle</p></td>\n<td align=\"left\"><ul>\n<li><p>pickle.loads</p></li>\n<li><p>pickle.load</p></li>\n<li><p>pickle.Unpickler</p></li>\n<li><p>cPickle.loads</p></li>\n<li><p>cPickle.load</p></li>\n<li><p>cPickle.Unpickler</p></li>\n<li><p>dill.loads</p></li>\n<li><p>dill.load</p></li>\n<li><p>dill.Unpickler</p></li>\n<li><p>shelve.open</p></li>\n<li><p>shelve.DbfilenameShelf</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B302","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Deserialization with the marshal module is possibly dangerous.","subCategory":"InsecureModulesLibraries","description":"B302: marshal¶","explanation":"### B302: marshal[¶](#b302-marshal \"Permalink to this headline\")\n\nDeserialization with the marshal module is possibly dangerous.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B302</p></td>\n<td align=\"left\"><p>marshal</p></td>\n<td align=\"left\"><ul>\n<li><p>marshal.load</p></li>\n<li><p>marshal.loads</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B303","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Use of insecure MD2, MD4, MD5, or SHA1 hash function.","subCategory":"Cryptography","description":"B303: md5¶","explanation":"### B303: md5[¶](#b303-md5 \"Permalink to this headline\")\n\nUse of insecure MD2, MD4, MD5, or SHA1 hash function.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B303</p></td>\n<td align=\"left\"><p>md5</p></td>\n<td align=\"left\"><ul>\n<li><p>hashlib.md5</p></li>\n<li><p>hashlib.sha1</p></li>\n<li><p>Crypto.Hash.MD2.new</p></li>\n<li><p>Crypto.Hash.MD4.new</p></li>\n<li><p>Crypto.Hash.MD5.new</p></li>\n<li><p>Crypto.Hash.SHA.new</p></li>\n<li><p>Cryptodome.Hash.MD2.new</p></li>\n<li><p>Cryptodome.Hash.MD4.new</p></li>\n<li><p>Cryptodome.Hash.MD5.new</p></li>\n<li><p>Cryptodome.Hash.SHA.new</p></li>\n<li><p>cryptography.hazmat.primitives .hashes.MD5</p></li>\n<li><p>cryptography.hazmat.primitives .hashes.SHA1</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B304","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Use of insecure cipher or cipher mode","subCategory":"Cryptography","description":"B304 - B305: ciphers and modes¶","explanation":"### B304 - B305: ciphers and modes[¶](#b304-b305-ciphers-and-modes \"Permalink to this headline\")\n\nUse of insecure cipher or cipher mode. Replace with a known secure\ncipher such as AES.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B304</p></td>\n<td align=\"left\"><p>ciphers</p></td>\n<td align=\"left\"><ul>\n<li><p>Crypto.Cipher.ARC2.new</p></li>\n<li><p>Crypto.Cipher.ARC4.new</p></li>\n<li><p>Crypto.Cipher.Blowfish.new</p></li>\n<li><p>Crypto.Cipher.DES.new</p></li>\n<li><p>Crypto.Cipher.XOR.new</p></li>\n<li><p>Cryptodome.Cipher.ARC2.new</p></li>\n<li><p>Cryptodome.Cipher.ARC4.new</p></li>\n<li><p>Cryptodome.Cipher.Blowfish.new</p></li>\n<li><p>Cryptodome.Cipher.DES.new</p></li>\n<li><p>Cryptodome.Cipher.XOR.new</p></li>\n<li><p>cryptography.hazmat.primitives .ciphers.algorithms.ARC4</p></li>\n<li><p>cryptography.hazmat.primitives .ciphers.algorithms.Blowfish</p></li>\n<li><p>cryptography.hazmat.primitives .ciphers.algorithms.IDEA</p></li>\n</ul></td>\n<td align=\"left\"><p>High</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B305</p></td>\n<td align=\"left\"><p>cipher_modes</p></td>\n<td align=\"left\"><ul>\n<li><p>cryptography.hazmat.primitives .ciphers.modes.ECB</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B305","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Use of insecure cipher or cipher mode","subCategory":"Cryptography","description":"B304 - B305: ciphers and modes¶","explanation":"### B304 - B305: ciphers and modes[¶](#b304-b305-ciphers-and-modes \"Permalink to this headline\")\n\nUse of insecure cipher or cipher mode. Replace with a known secure\ncipher such as AES.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B304</p></td>\n<td align=\"left\"><p>ciphers</p></td>\n<td align=\"left\"><ul>\n<li><p>Crypto.Cipher.ARC2.new</p></li>\n<li><p>Crypto.Cipher.ARC4.new</p></li>\n<li><p>Crypto.Cipher.Blowfish.new</p></li>\n<li><p>Crypto.Cipher.DES.new</p></li>\n<li><p>Crypto.Cipher.XOR.new</p></li>\n<li><p>Cryptodome.Cipher.ARC2.new</p></li>\n<li><p>Cryptodome.Cipher.ARC4.new</p></li>\n<li><p>Cryptodome.Cipher.Blowfish.new</p></li>\n<li><p>Cryptodome.Cipher.DES.new</p></li>\n<li><p>Cryptodome.Cipher.XOR.new</p></li>\n<li><p>cryptography.hazmat.primitives .ciphers.algorithms.ARC4</p></li>\n<li><p>cryptography.hazmat.primitives .ciphers.algorithms.Blowfish</p></li>\n<li><p>cryptography.hazmat.primitives .ciphers.algorithms.IDEA</p></li>\n</ul></td>\n<td align=\"left\"><p>High</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B305</p></td>\n<td align=\"left\"><p>cipher_modes</p></td>\n<td align=\"left\"><ul>\n<li><p>cryptography.hazmat.primitives .ciphers.modes.ECB</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B306","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Use of insecure and deprecated function (mktemp).","description":"B306: mktemp_q¶","explanation":"### B306: mktemp\\_q[¶](#b306-mktemp-q \"Permalink to this headline\")\n\nUse of insecure and deprecated function (mktemp).\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B306</p></td>\n<td align=\"left\"><p>mktemp_q</p></td>\n<td align=\"left\"><ul>\n<li><p>tempfile.mktemp</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B307","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Use of possibly insecure function - consider using safer ast.literal_eval.","subCategory":"InputValidation","description":"B307: eval¶","explanation":"### B307: eval[¶](#b307-eval \"Permalink to this headline\")\n\nUse of possibly insecure function - consider using safer\nast.literal\\_eval.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B307</p></td>\n<td align=\"left\"><p>eval</p></td>\n<td align=\"left\"><ul>\n<li><p>eval</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B308","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed.","subCategory":"XSS","description":"B308: mark_safe¶","explanation":"### B308: mark\\_safe[¶](#b308-mark-safe \"Permalink to this headline\")\n\nUse of mark\\_safe() may expose cross-site scripting vulnerabilities and\nshould be reviewed.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B308</p></td>\n<td align=\"left\"><p>mark_safe</p></td>\n<td align=\"left\"><ul>\n<li><p>django.utils.safestring.mark_safe</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B309","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Use of HTTPSConnection on older versions of Python prior to 2.7.9 and 3.4.3 do not provide security, see https://wiki.openstack.org/wiki/OSSN/OSSN-0033","subCategory":"SSL","description":"B309: httpsconnection¶","explanation":"### B309: httpsconnection[¶](#b309-httpsconnection \"Permalink to this headline\")\n\nUse of HTTPSConnection on older versions of Python prior to 2.7.9 and\n3.4.3 do not provide security, see\n<https://wiki.openstack.org/wiki/OSSN/OSSN-0033>\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B309</p></td>\n<td align=\"left\"><p>httpsconnection</p></td>\n<td align=\"left\"><ul>\n<li><p>httplib.HTTPSConnection</p></li>\n<li><p>http.client.HTTPSConnection</p></li>\n<li><p>six.moves.http_client .HTTPSConnection</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B310","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Audit url open for permitted schemes","subCategory":"HTTP","description":"B310: urllib_urlopen¶","explanation":"### B310: urllib\\_urlopen[¶](#b310-urllib-urlopen \"Permalink to this headline\")\n\nAudit url open for permitted schemes. Allowing use of ‘file:’’ or custom\nschemes is often unexpected.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B310</p></td>\n<td align=\"left\"><p>urllib_urlopen</p></td>\n<td align=\"left\"><ul>\n<li><p>urllib.urlopen</p></li>\n<li><p>urllib.request.urlopen</p></li>\n<li><p>urllib.urlretrieve</p></li>\n<li><p>urllib.request.urlretrieve</p></li>\n<li><p>urllib.URLopener</p></li>\n<li><p>urllib.request.URLopener</p></li>\n<li><p>urllib.FancyURLopener</p></li>\n<li><p>urllib.request.FancyURLopener</p></li>\n<li><p>urllib2.urlopen</p></li>\n<li><p>urllib2.Request</p></li>\n<li><p>six.moves.urllib.request.urlopen</p></li>\n<li><p>six.moves.urllib.request .urlretrieve</p></li>\n<li><p>six.moves.urllib.request .URLopener</p></li>\n<li><p>six.moves.urllib.request .FancyURLopener</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B311","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Standard pseudo-random generators are not suitable for security/cryptographic purposes.","subCategory":"Cryptography","description":"B311: random¶","explanation":"### B311: random[¶](#b311-random \"Permalink to this headline\")\n\nStandard pseudo-random generators are not suitable for\nsecurity/cryptographic purposes.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B311</p></td>\n<td align=\"left\"><p>random</p></td>\n<td align=\"left\"><ul>\n<li><p>random.random</p></li>\n<li><p>random.randrange</p></li>\n<li><p>random.randint</p></li>\n<li><p>random.choice</p></li>\n<li><p>random.uniform</p></li>\n<li><p>random.triangular</p></li>\n</ul></td>\n<td align=\"left\"><p>Low</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B312","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Telnet-related functions are being called","subCategory":"InsecureModulesLibraries","description":"B312: telnetlib¶","explanation":"### B312: telnetlib[¶](#b312-telnetlib \"Permalink to this headline\")\n\nTelnet-related functions are being called. Telnet is considered\ninsecure. Use SSH or some other encrypted protocol.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B312</p></td>\n<td align=\"left\"><p>telnetlib</p></td>\n<td align=\"left\"><ul>\n<li><p>telnetlib.*</p></li>\n</ul></td>\n<td align=\"left\"><p>High</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B313","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various XLM methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InputValidation","description":"B313 - B320: XML¶","explanation":"### B313 - B320: XML[¶](#b313-b320-xml \"Permalink to this headline\")\n\nMost of this is based off of Christian Heimes’ work on defusedxml:\n<https://pypi.org/project/defusedxml/#defusedxml-sax>\n\nUsing various XLM methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Methods should be replaced with their\ndefusedxml equivalents.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B313</p></td>\n<td align=\"left\"><p>xml_bad_cElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.cElementTree.parse</p></li>\n<li><p>xml.etree.cElementTree.iterparse</p></li>\n<li><p>xml.etree.cElementTree.fromstring</p></li>\n<li><p>xml.etree.cElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B314</p></td>\n<td align=\"left\"><p>xml_bad_ElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.ElementTree.parse</p></li>\n<li><p>xml.etree.ElementTree.iterparse</p></li>\n<li><p>xml.etree.ElementTree.fromstring</p></li>\n<li><p>xml.etree.ElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B315</p></td>\n<td align=\"left\"><p>xml_bad_expatreader</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.expatreader.create_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B316</p></td>\n<td align=\"left\"><p>xml_bad_expatbuilder</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.expatbuilder.parse</p></li>\n<li><p>xml.dom.expatbuilder.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B317</p></td>\n<td align=\"left\"><p>xml_bad_sax</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.parse</p></li>\n<li><p>xml.sax.parseString</p></li>\n<li><p>xml.sax.make_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B318</p></td>\n<td align=\"left\"><p>xml_bad_minidom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.minidom.parse</p></li>\n<li><p>xml.dom.minidom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B319</p></td>\n<td align=\"left\"><p>xml_bad_pulldom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.pulldom.parse</p></li>\n<li><p>xml.dom.pulldom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B320</p></td>\n<td align=\"left\"><p>xml_bad_etree</p></td>\n<td align=\"left\"><ul>\n<li><p>lxml.etree.parse</p></li>\n<li><p>lxml.etree.fromstring</p></li>\n<li><p>lxml.etree.RestrictedElement</p></li>\n<li><p>lxml.etree.GlobalParserTLS</p></li>\n<li><p>lxml.etree.getDefaultParser</p></li>\n<li><p>lxml.etree.check_docinfo</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B314","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various XLM methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InputValidation","description":"B313 - B320: XML¶","explanation":"### B313 - B320: XML[¶](#b313-b320-xml \"Permalink to this headline\")\n\nMost of this is based off of Christian Heimes’ work on defusedxml:\n<https://pypi.org/project/defusedxml/#defusedxml-sax>\n\nUsing various XLM methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Methods should be replaced with their\ndefusedxml equivalents.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B313</p></td>\n<td align=\"left\"><p>xml_bad_cElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.cElementTree.parse</p></li>\n<li><p>xml.etree.cElementTree.iterparse</p></li>\n<li><p>xml.etree.cElementTree.fromstring</p></li>\n<li><p>xml.etree.cElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B314</p></td>\n<td align=\"left\"><p>xml_bad_ElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.ElementTree.parse</p></li>\n<li><p>xml.etree.ElementTree.iterparse</p></li>\n<li><p>xml.etree.ElementTree.fromstring</p></li>\n<li><p>xml.etree.ElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B315</p></td>\n<td align=\"left\"><p>xml_bad_expatreader</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.expatreader.create_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B316</p></td>\n<td align=\"left\"><p>xml_bad_expatbuilder</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.expatbuilder.parse</p></li>\n<li><p>xml.dom.expatbuilder.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B317</p></td>\n<td align=\"left\"><p>xml_bad_sax</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.parse</p></li>\n<li><p>xml.sax.parseString</p></li>\n<li><p>xml.sax.make_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B318</p></td>\n<td align=\"left\"><p>xml_bad_minidom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.minidom.parse</p></li>\n<li><p>xml.dom.minidom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B319</p></td>\n<td align=\"left\"><p>xml_bad_pulldom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.pulldom.parse</p></li>\n<li><p>xml.dom.pulldom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B320</p></td>\n<td align=\"left\"><p>xml_bad_etree</p></td>\n<td align=\"left\"><ul>\n<li><p>lxml.etree.parse</p></li>\n<li><p>lxml.etree.fromstring</p></li>\n<li><p>lxml.etree.RestrictedElement</p></li>\n<li><p>lxml.etree.GlobalParserTLS</p></li>\n<li><p>lxml.etree.getDefaultParser</p></li>\n<li><p>lxml.etree.check_docinfo</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B315","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various XLM methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InputValidation","description":"B313 - B320: XML¶","explanation":"### B313 - B320: XML[¶](#b313-b320-xml \"Permalink to this headline\")\n\nMost of this is based off of Christian Heimes’ work on defusedxml:\n<https://pypi.org/project/defusedxml/#defusedxml-sax>\n\nUsing various XLM methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Methods should be replaced with their\ndefusedxml equivalents.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B313</p></td>\n<td align=\"left\"><p>xml_bad_cElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.cElementTree.parse</p></li>\n<li><p>xml.etree.cElementTree.iterparse</p></li>\n<li><p>xml.etree.cElementTree.fromstring</p></li>\n<li><p>xml.etree.cElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B314</p></td>\n<td align=\"left\"><p>xml_bad_ElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.ElementTree.parse</p></li>\n<li><p>xml.etree.ElementTree.iterparse</p></li>\n<li><p>xml.etree.ElementTree.fromstring</p></li>\n<li><p>xml.etree.ElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B315</p></td>\n<td align=\"left\"><p>xml_bad_expatreader</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.expatreader.create_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B316</p></td>\n<td align=\"left\"><p>xml_bad_expatbuilder</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.expatbuilder.parse</p></li>\n<li><p>xml.dom.expatbuilder.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B317</p></td>\n<td align=\"left\"><p>xml_bad_sax</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.parse</p></li>\n<li><p>xml.sax.parseString</p></li>\n<li><p>xml.sax.make_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B318</p></td>\n<td align=\"left\"><p>xml_bad_minidom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.minidom.parse</p></li>\n<li><p>xml.dom.minidom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B319</p></td>\n<td align=\"left\"><p>xml_bad_pulldom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.pulldom.parse</p></li>\n<li><p>xml.dom.pulldom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B320</p></td>\n<td align=\"left\"><p>xml_bad_etree</p></td>\n<td align=\"left\"><ul>\n<li><p>lxml.etree.parse</p></li>\n<li><p>lxml.etree.fromstring</p></li>\n<li><p>lxml.etree.RestrictedElement</p></li>\n<li><p>lxml.etree.GlobalParserTLS</p></li>\n<li><p>lxml.etree.getDefaultParser</p></li>\n<li><p>lxml.etree.check_docinfo</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B316","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various XLM methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InputValidation","description":"B313 - B320: XML¶","explanation":"### B313 - B320: XML[¶](#b313-b320-xml \"Permalink to this headline\")\n\nMost of this is based off of Christian Heimes’ work on defusedxml:\n<https://pypi.org/project/defusedxml/#defusedxml-sax>\n\nUsing various XLM methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Methods should be replaced with their\ndefusedxml equivalents.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B313</p></td>\n<td align=\"left\"><p>xml_bad_cElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.cElementTree.parse</p></li>\n<li><p>xml.etree.cElementTree.iterparse</p></li>\n<li><p>xml.etree.cElementTree.fromstring</p></li>\n<li><p>xml.etree.cElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B314</p></td>\n<td align=\"left\"><p>xml_bad_ElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.ElementTree.parse</p></li>\n<li><p>xml.etree.ElementTree.iterparse</p></li>\n<li><p>xml.etree.ElementTree.fromstring</p></li>\n<li><p>xml.etree.ElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B315</p></td>\n<td align=\"left\"><p>xml_bad_expatreader</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.expatreader.create_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B316</p></td>\n<td align=\"left\"><p>xml_bad_expatbuilder</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.expatbuilder.parse</p></li>\n<li><p>xml.dom.expatbuilder.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B317</p></td>\n<td align=\"left\"><p>xml_bad_sax</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.parse</p></li>\n<li><p>xml.sax.parseString</p></li>\n<li><p>xml.sax.make_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B318</p></td>\n<td align=\"left\"><p>xml_bad_minidom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.minidom.parse</p></li>\n<li><p>xml.dom.minidom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B319</p></td>\n<td align=\"left\"><p>xml_bad_pulldom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.pulldom.parse</p></li>\n<li><p>xml.dom.pulldom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B320</p></td>\n<td align=\"left\"><p>xml_bad_etree</p></td>\n<td align=\"left\"><ul>\n<li><p>lxml.etree.parse</p></li>\n<li><p>lxml.etree.fromstring</p></li>\n<li><p>lxml.etree.RestrictedElement</p></li>\n<li><p>lxml.etree.GlobalParserTLS</p></li>\n<li><p>lxml.etree.getDefaultParser</p></li>\n<li><p>lxml.etree.check_docinfo</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B317","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various XLM methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InputValidation","description":"B313 - B320: XML¶","explanation":"### B313 - B320: XML[¶](#b313-b320-xml \"Permalink to this headline\")\n\nMost of this is based off of Christian Heimes’ work on defusedxml:\n<https://pypi.org/project/defusedxml/#defusedxml-sax>\n\nUsing various XLM methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Methods should be replaced with their\ndefusedxml equivalents.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B313</p></td>\n<td align=\"left\"><p>xml_bad_cElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.cElementTree.parse</p></li>\n<li><p>xml.etree.cElementTree.iterparse</p></li>\n<li><p>xml.etree.cElementTree.fromstring</p></li>\n<li><p>xml.etree.cElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B314</p></td>\n<td align=\"left\"><p>xml_bad_ElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.ElementTree.parse</p></li>\n<li><p>xml.etree.ElementTree.iterparse</p></li>\n<li><p>xml.etree.ElementTree.fromstring</p></li>\n<li><p>xml.etree.ElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B315</p></td>\n<td align=\"left\"><p>xml_bad_expatreader</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.expatreader.create_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B316</p></td>\n<td align=\"left\"><p>xml_bad_expatbuilder</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.expatbuilder.parse</p></li>\n<li><p>xml.dom.expatbuilder.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B317</p></td>\n<td align=\"left\"><p>xml_bad_sax</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.parse</p></li>\n<li><p>xml.sax.parseString</p></li>\n<li><p>xml.sax.make_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B318</p></td>\n<td align=\"left\"><p>xml_bad_minidom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.minidom.parse</p></li>\n<li><p>xml.dom.minidom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B319</p></td>\n<td align=\"left\"><p>xml_bad_pulldom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.pulldom.parse</p></li>\n<li><p>xml.dom.pulldom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B320</p></td>\n<td align=\"left\"><p>xml_bad_etree</p></td>\n<td align=\"left\"><ul>\n<li><p>lxml.etree.parse</p></li>\n<li><p>lxml.etree.fromstring</p></li>\n<li><p>lxml.etree.RestrictedElement</p></li>\n<li><p>lxml.etree.GlobalParserTLS</p></li>\n<li><p>lxml.etree.getDefaultParser</p></li>\n<li><p>lxml.etree.check_docinfo</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B318","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various XLM methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InputValidation","description":"B313 - B320: XML¶","explanation":"### B313 - B320: XML[¶](#b313-b320-xml \"Permalink to this headline\")\n\nMost of this is based off of Christian Heimes’ work on defusedxml:\n<https://pypi.org/project/defusedxml/#defusedxml-sax>\n\nUsing various XLM methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Methods should be replaced with their\ndefusedxml equivalents.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B313</p></td>\n<td align=\"left\"><p>xml_bad_cElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.cElementTree.parse</p></li>\n<li><p>xml.etree.cElementTree.iterparse</p></li>\n<li><p>xml.etree.cElementTree.fromstring</p></li>\n<li><p>xml.etree.cElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B314</p></td>\n<td align=\"left\"><p>xml_bad_ElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.ElementTree.parse</p></li>\n<li><p>xml.etree.ElementTree.iterparse</p></li>\n<li><p>xml.etree.ElementTree.fromstring</p></li>\n<li><p>xml.etree.ElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B315</p></td>\n<td align=\"left\"><p>xml_bad_expatreader</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.expatreader.create_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B316</p></td>\n<td align=\"left\"><p>xml_bad_expatbuilder</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.expatbuilder.parse</p></li>\n<li><p>xml.dom.expatbuilder.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B317</p></td>\n<td align=\"left\"><p>xml_bad_sax</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.parse</p></li>\n<li><p>xml.sax.parseString</p></li>\n<li><p>xml.sax.make_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B318</p></td>\n<td align=\"left\"><p>xml_bad_minidom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.minidom.parse</p></li>\n<li><p>xml.dom.minidom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B319</p></td>\n<td align=\"left\"><p>xml_bad_pulldom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.pulldom.parse</p></li>\n<li><p>xml.dom.pulldom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B320</p></td>\n<td align=\"left\"><p>xml_bad_etree</p></td>\n<td align=\"left\"><ul>\n<li><p>lxml.etree.parse</p></li>\n<li><p>lxml.etree.fromstring</p></li>\n<li><p>lxml.etree.RestrictedElement</p></li>\n<li><p>lxml.etree.GlobalParserTLS</p></li>\n<li><p>lxml.etree.getDefaultParser</p></li>\n<li><p>lxml.etree.check_docinfo</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B319","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various XLM methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InputValidation","description":"B313 - B320: XML¶","explanation":"### B313 - B320: XML[¶](#b313-b320-xml \"Permalink to this headline\")\n\nMost of this is based off of Christian Heimes’ work on defusedxml:\n<https://pypi.org/project/defusedxml/#defusedxml-sax>\n\nUsing various XLM methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Methods should be replaced with their\ndefusedxml equivalents.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B313</p></td>\n<td align=\"left\"><p>xml_bad_cElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.cElementTree.parse</p></li>\n<li><p>xml.etree.cElementTree.iterparse</p></li>\n<li><p>xml.etree.cElementTree.fromstring</p></li>\n<li><p>xml.etree.cElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B314</p></td>\n<td align=\"left\"><p>xml_bad_ElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.ElementTree.parse</p></li>\n<li><p>xml.etree.ElementTree.iterparse</p></li>\n<li><p>xml.etree.ElementTree.fromstring</p></li>\n<li><p>xml.etree.ElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B315</p></td>\n<td align=\"left\"><p>xml_bad_expatreader</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.expatreader.create_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B316</p></td>\n<td align=\"left\"><p>xml_bad_expatbuilder</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.expatbuilder.parse</p></li>\n<li><p>xml.dom.expatbuilder.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B317</p></td>\n<td align=\"left\"><p>xml_bad_sax</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.parse</p></li>\n<li><p>xml.sax.parseString</p></li>\n<li><p>xml.sax.make_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B318</p></td>\n<td align=\"left\"><p>xml_bad_minidom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.minidom.parse</p></li>\n<li><p>xml.dom.minidom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B319</p></td>\n<td align=\"left\"><p>xml_bad_pulldom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.pulldom.parse</p></li>\n<li><p>xml.dom.pulldom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B320</p></td>\n<td align=\"left\"><p>xml_bad_etree</p></td>\n<td align=\"left\"><ul>\n<li><p>lxml.etree.parse</p></li>\n<li><p>lxml.etree.fromstring</p></li>\n<li><p>lxml.etree.RestrictedElement</p></li>\n<li><p>lxml.etree.GlobalParserTLS</p></li>\n<li><p>lxml.etree.getDefaultParser</p></li>\n<li><p>lxml.etree.check_docinfo</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B320","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various XLM methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InputValidation","description":"B313 - B320: XML¶","explanation":"### B313 - B320: XML[¶](#b313-b320-xml \"Permalink to this headline\")\n\nMost of this is based off of Christian Heimes’ work on defusedxml:\n<https://pypi.org/project/defusedxml/#defusedxml-sax>\n\nUsing various XLM methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Methods should be replaced with their\ndefusedxml equivalents.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B313</p></td>\n<td align=\"left\"><p>xml_bad_cElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.cElementTree.parse</p></li>\n<li><p>xml.etree.cElementTree.iterparse</p></li>\n<li><p>xml.etree.cElementTree.fromstring</p></li>\n<li><p>xml.etree.cElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B314</p></td>\n<td align=\"left\"><p>xml_bad_ElementTree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.ElementTree.parse</p></li>\n<li><p>xml.etree.ElementTree.iterparse</p></li>\n<li><p>xml.etree.ElementTree.fromstring</p></li>\n<li><p>xml.etree.ElementTree.XMLParser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B315</p></td>\n<td align=\"left\"><p>xml_bad_expatreader</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.expatreader.create_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B316</p></td>\n<td align=\"left\"><p>xml_bad_expatbuilder</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.expatbuilder.parse</p></li>\n<li><p>xml.dom.expatbuilder.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B317</p></td>\n<td align=\"left\"><p>xml_bad_sax</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax.parse</p></li>\n<li><p>xml.sax.parseString</p></li>\n<li><p>xml.sax.make_parser</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B318</p></td>\n<td align=\"left\"><p>xml_bad_minidom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.minidom.parse</p></li>\n<li><p>xml.dom.minidom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>B319</p></td>\n<td align=\"left\"><p>xml_bad_pulldom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.pulldom.parse</p></li>\n<li><p>xml.dom.pulldom.parseString</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>B320</p></td>\n<td align=\"left\"><p>xml_bad_etree</p></td>\n<td align=\"left\"><ul>\n<li><p>lxml.etree.parse</p></li>\n<li><p>lxml.etree.fromstring</p></li>\n<li><p>lxml.etree.RestrictedElement</p></li>\n<li><p>lxml.etree.GlobalParserTLS</p></li>\n<li><p>lxml.etree.getDefaultParser</p></li>\n<li><p>lxml.etree.check_docinfo</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B321","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"FTP-related functions are being called","subCategory":"InsecureModulesLibraries","description":"B321: ftplib¶","explanation":"### B321: ftplib[¶](#b321-ftplib \"Permalink to this headline\")\n\nFTP-related functions are being called. FTP is considered insecure. Use\nSSH/SFTP/SCP or some other encrypted protocol.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B321</p></td>\n<td align=\"left\"><p>ftplib</p></td>\n<td align=\"left\"><ul>\n<li><p>ftplib.*</p></li>\n</ul></td>\n<td align=\"left\"><p>High</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B322","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"The check for this call has been removed.","description":"B322: input¶","explanation":"### B322: input[¶](#b322-input \"Permalink to this headline\")\n\nThe check for this call has been removed.\n\nThe input method in Python 2 will read from standard input, evaluate and\nrun the resulting string as python source code. This is similar, though\nin many ways worse, than using eval. On Python 2, use raw\\_input\ninstead, input is safe in Python 3.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B322</p></td>\n<td align=\"left\"><p>input</p></td>\n<td align=\"left\"><ul>\n<li><p>input</p></li>\n</ul></td>\n<td align=\"left\"><p>High</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B323","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"By default, Python will create a secure, verified ssl context for use in such classes as HTTPSConnection","description":"B323: unverified_context¶","explanation":"### B323: unverified\\_context[¶](#b323-unverified-context \"Permalink to this headline\")\n\nBy default, Python will create a secure, verified ssl context for use in\nsuch classes as HTTPSConnection. However, it still allows using an\ninsecure context via the \\_create\\_unverified\\_context that reverts to\nthe previous behavior that does not validate certificates or perform\nhostname checks.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B323</p></td>\n<td align=\"left\"><p>unverified_context</p></td>\n<td align=\"left\"><ul>\n<li><p>ssl._create_unverified_context</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B325","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"Use of os.tempnam() and os.tmpnam() is vulnerable to symlink attacks","description":"B325: tempnam¶","explanation":"### B325: tempnam[¶](#b325-tempnam \"Permalink to this headline\")\n\nUse of os.tempnam() and os.tmpnam() is vulnerable to symlink attacks.\nConsider using tmpfile() instead.\n\n  - For further information:  \n    <https://docs.python.org/2.7/library/os.html#os.tempnam>\n    <https://docs.python.org/3/whatsnew/3.0.html?highlight=tempnam>\n    <https://bugs.python.org/issue17880>\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Calls</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B325</p></td>\n<td align=\"left\"><p>tempnam</p></td>\n<td align=\"left\"><ul>\n<li><p>os.tempnam</p></li>\n<li><p>os.tmpnam</p></li>\n</ul></td>\n<td align=\"left\"><p>Medium</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B401","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"A telnet-related module is being imported","subCategory":"InsecureModulesLibraries","description":"B401: import_telnetlib¶","explanation":"### B401: import\\_telnetlib[¶](#b401-import-telnetlib \"Permalink to this headline\")\n\nA telnet-related module is being imported. Telnet is considered\ninsecure. Use SSH or some other encrypted protocol.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B401</p></td>\n<td align=\"left\"><p>import_telnetlib</p></td>\n<td align=\"left\"><ul>\n<li><p>telnetlib</p></li>\n</ul></td>\n<td align=\"left\"><p>high</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B402","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"A FTP-related module is being imported","subCategory":"InsecureModulesLibraries","description":"B402: import_ftplib¶","explanation":"### B402: import\\_ftplib[¶](#b402-import-ftplib \"Permalink to this headline\")\n\nA FTP-related module is being imported. FTP is considered insecure. Use\nSSH/SFTP/SCP or some other encrypted protocol.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B402</p></td>\n<td align=\"left\"><p>import_ftplib</p></td>\n<td align=\"left\"><ul>\n<li><p>ftplib</p></li>\n</ul></td>\n<td align=\"left\"><p>high</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B403","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Consider possible security implications associated with these modules.","subCategory":"InsecureModulesLibraries","description":"B403: import_pickle¶","explanation":"### B403: import\\_pickle[¶](#b403-import-pickle \"Permalink to this headline\")\n\nConsider possible security implications associated with these modules.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B403</p></td>\n<td align=\"left\"><p>import_pickle</p></td>\n<td align=\"left\"><ul>\n<li><p>pickle</p></li>\n<li><p>cPickle</p></li>\n<li><p>dill</p></li>\n<li><p>shelve</p></li>\n</ul></td>\n<td align=\"left\"><p>low</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B404","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Consider possible security implications associated with these modules.","subCategory":"InsecureModulesLibraries","description":"B404: import_subprocess¶","explanation":"### B404: import\\_subprocess[¶](#b404-import-subprocess \"Permalink to this headline\")\n\nConsider possible security implications associated with these modules.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B404</p></td>\n<td align=\"left\"><p>import_subprocess</p></td>\n<td align=\"left\"><ul>\n<li><p>subprocess</p></li>\n</ul></td>\n<td align=\"left\"><p>low</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B405","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InsecureModulesLibraries","description":"B405: import_xml_etree¶","explanation":"### B405: import\\_xml\\_etree[¶](#b405-import-xml-etree \"Permalink to this headline\")\n\nUsing various methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Replace vulnerable imports with the\nequivalent defusedxml package, or make sure defusedxml.defuse\\_stdlib()\nis called.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B405</p></td>\n<td align=\"left\"><p>import_xml_etree</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.etree.cElementTree</p></li>\n<li><p>xml.etree.ElementTree</p></li>\n</ul></td>\n<td align=\"left\"><p>low</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B406","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InsecureModulesLibraries","description":"B406: import_xml_sax¶","explanation":"### B406: import\\_xml\\_sax[¶](#b406-import-xml-sax \"Permalink to this headline\")\n\nUsing various methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Replace vulnerable imports with the\nequivalent defusedxml package, or make sure defusedxml.defuse\\_stdlib()\nis called.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B406</p></td>\n<td align=\"left\"><p>import_xml_sax</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.sax</p></li>\n</ul></td>\n<td align=\"left\"><p>low</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B407","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InsecureModulesLibraries","description":"B407: import_xml_expat¶","explanation":"### B407: import\\_xml\\_expat[¶](#b407-import-xml-expat \"Permalink to this headline\")\n\nUsing various methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Replace vulnerable imports with the\nequivalent defusedxml package, or make sure defusedxml.defuse\\_stdlib()\nis called.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B407</p></td>\n<td align=\"left\"><p>import_xml_expat</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.expatbuilder</p></li>\n</ul></td>\n<td align=\"left\"><p>low</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B408","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InsecureModulesLibraries","description":"B408: import_xml_minidom¶","explanation":"### B408: import\\_xml\\_minidom[¶](#b408-import-xml-minidom \"Permalink to this headline\")\n\nUsing various methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Replace vulnerable imports with the\nequivalent defusedxml package, or make sure defusedxml.defuse\\_stdlib()\nis called.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B408</p></td>\n<td align=\"left\"><p>import_xml_minidom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.minidom</p></li>\n</ul></td>\n<td align=\"left\"><p>low</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B409","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InsecureModulesLibraries","description":"B409: import_xml_pulldom¶","explanation":"### B409: import\\_xml\\_pulldom[¶](#b409-import-xml-pulldom \"Permalink to this headline\")\n\nUsing various methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Replace vulnerable imports with the\nequivalent defusedxml package, or make sure defusedxml.defuse\\_stdlib()\nis called.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B409</p></td>\n<td align=\"left\"><p>import_xml_pulldom</p></td>\n<td align=\"left\"><ul>\n<li><p>xml.dom.pulldom</p></li>\n</ul></td>\n<td align=\"left\"><p>low</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B410","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks","subCategory":"InsecureModulesLibraries","description":"B410: import_lxml¶","explanation":"### B410: import\\_lxml[¶](#b410-import-lxml \"Permalink to this headline\")\n\nUsing various methods to parse untrusted XML data is known to be\nvulnerable to XML attacks. Replace vulnerable imports with the\nequivalent defusedxml package.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B410</p></td>\n<td align=\"left\"><p>import_lxml</p></td>\n<td align=\"left\"><ul>\n<li><p>lxml</p></li>\n</ul></td>\n<td align=\"left\"><p>low</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B411","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"XMLRPC is particularly dangerous as it is also concerned with communicating data over a network","subCategory":"InsecureModulesLibraries","description":"B411: import_xmlrpclib¶","explanation":"### B411: import\\_xmlrpclib[¶](#b411-import-xmlrpclib \"Permalink to this headline\")\n\nXMLRPC is particularly dangerous as it is also concerned with\ncommunicating data over a network. Use defused.xmlrpc.monkey\\_patch()\nfunction to monkey-patch xmlrpclib and mitigate remote XML attacks.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B411</p></td>\n<td align=\"left\"><p>import_xmlrpclib</p></td>\n<td align=\"left\"><ul>\n<li><p>xmlrpclib</p></li>\n</ul></td>\n<td align=\"left\"><p>high</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B412","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"httpoxy is a set of vulnerabilities that affect application code running in CGI, or CGI-like environments","subCategory":"InsecureModulesLibraries","description":"B412: import_httpoxy¶","explanation":"### B412: import\\_httpoxy[¶](#b412-import-httpoxy \"Permalink to this headline\")\n\nhttpoxy is a set of vulnerabilities that affect application code running\nin CGI, or CGI-like environments. The use of CGI for web applications\nshould be avoided to prevent this class of attack. More details are\navailable at <https://httpoxy.org/>.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B412</p></td>\n<td align=\"left\"><p>import_httpoxy</p></td>\n<td align=\"left\"><ul>\n<li><p>wsgiref.handlers.CGIHandler</p></li>\n<li><p>twisted.web.twcgi.CGIScript</p></li>\n</ul></td>\n<td align=\"left\"><p>high</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B413","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"pycrypto library is known to have publicly disclosed buffer overflow vulnerability https://github.com/dlitz/pycrypto/issues/176","description":"B413: import_pycrypto¶","explanation":"### B413: import\\_pycrypto[¶](#b413-import-pycrypto \"Permalink to this headline\")\n\npycrypto library is known to have publicly disclosed buffer overflow\nvulnerability <https://github.com/dlitz/pycrypto/issues/176>. It is no\nlonger actively maintained and has been deprecated in favor of\npyca/cryptography library.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B413</p></td>\n<td align=\"left\"><p>import_pycrypto</p></td>\n<td align=\"left\"><ul>\n<li><p>Crypto.Cipher</p></li>\n<li><p>Crypto.Hash</p></li>\n<li><p>Crypto.IO</p></li>\n<li><p>Crypto.Protocol</p></li>\n<li><p>Crypto.PublicKey</p></li>\n<li><p>Crypto.Random</p></li>\n<li><p>Crypto.Signature</p></li>\n<li><p>Crypto.Util</p></li>\n</ul></td>\n<td align=\"left\"><p>high</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B414","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"This import blacklist has been removed","description":"B414: import_pycryptodome¶","explanation":"### B414: import\\_pycryptodome[¶](#b414-import-pycryptodome \"Permalink to this headline\")\n\nThis import blacklist has been removed. The information here has been\nleft for historical purposes.\n\npycryptodome is a direct fork of pycrypto that has not fully addressed\nthe issues inherent in PyCrypto. It seems to exist, mainly, as an API\ncompatible continuation of pycrypto and should be deprecated in favor of\npyca/cryptography which has more support among the Python community.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\"><p>ID</p></th>\n<th align=\"left\"><p>Name</p></th>\n<th align=\"left\"><p>Imports</p></th>\n<th align=\"left\"><p>Severity</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>B414</p></td>\n<td align=\"left\"><p>import_pycryptodome</p></td>\n<td align=\"left\"><ul>\n<li><p>Cryptodome.Cipher</p></li>\n<li><p>Cryptodome.Hash</p></li>\n<li><p>Cryptodome.IO</p></li>\n<li><p>Cryptodome.Protocol</p></li>\n<li><p>Cryptodome.PublicKey</p></li>\n<li><p>Cryptodome.Random</p></li>\n<li><p>Cryptodome.Signature</p></li>\n<li><p>Cryptodome.Util</p></li>\n</ul></td>\n<td align=\"left\"><p>high</p></td>\n</tr>\n</tbody>\n</table>"},{"id":"Bandit_B501","category":"Security","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"request_with_no_cert_validation","subCategory":"SSL","description":"B501: Test for missing certificate validation¶","explanation":"## B501: Test for missing certificate validation[¶](#b501-test-for-missing-certificate-validation \"Permalink to this headline\")\n\nEncryption in general is typically critical to the security of many\napplications. Using TLS can greatly increase security by guaranteeing\nthe identity of the party you are communicating with. This is\naccomplished by one or both parties presenting trusted certificates\nduring the connection initialization phase of TLS.\n\nWhen request methods are used certificates are validated automatically\nwhich is the desired behavior. If certificate validation is explicitly\nturned off Bandit will return a HIGH severity error."},{"id":"Bandit_B502","category":"Security","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"ssl_with_bad_version","subCategory":"SSL","description":"B502: Test for SSL use with bad version used","explanation":"**B502: Test for SSL use with bad version used**\n\nSeveral highly publicized exploitable flaws have been discovered in all\nversions of SSL and early versions of TLS. It is strongly recommended\nthat use of the following known broken protocol versions be avoided:\n\n  - SSL v2\n\n  - SSL v3\n\n  - TLS v1\n\n  - TLS v1.1\n\nThis plugin test scans for calls to Python methods with parameters that\nindicate the used broken SSL/TLS protocol versions. Currently, detection\nsupports methods using Python’s native SSL/TLS support and the pyOpenSSL\nmodule. A HIGH severity warning will be reported whenever known broken\nprotocol versions are detected.\n\nIt is worth noting that native support for TLS 1.2 is only available in\nmore recent Python versions, specifically 2.7.9 and up, and 3.x\n\nA note on ‘SSLv23’:\n\nAmongst the available SSL/TLS versions provided by Python/pyOpenSSL\nthere exists the option to use SSLv23. This very poorly named option\nactually means “use the highest version of SSL/TLS supported by both the\nserver and client”. This may (and should be) a version well in advance\nof SSL v2 or v3. Bandit can scan for the use of SSLv23 if desired, but\nits detection does not necessarily indicate a problem.\n\nWhen using SSLv23 it is important to also provide flags to explicitly\nexclude bad versions of SSL/TLS from the protocol versions considered.\nBoth the Python native and pyOpenSSL modules provide the `OP_NO_SSLv2`\nand `OP_NO_SSLv3` flags for this purpose.\n\n**Config Options:**\n\n    ssl_with_bad_version:\n        bad_protocol_versions:\n            - PROTOCOL_SSLv2\n            - SSLv2_METHOD\n            - SSLv23_METHOD\n            - PROTOCOL_SSLv3  # strict option\n            - PROTOCOL_TLSv1  # strict option\n            - SSLv3_METHOD    # strict option\n            - TLSv1_METHOD    # strict option\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: ssl.wrap_socket call with insecure SSL/TLS protocol version\n    identified, security issue.\n       Severity: High   Confidence: High\n       Location: ./examples/ssl-insecure-version.py:13\n    12  # strict tests\n    13  ssl.wrap_socket(ssl_version=ssl.PROTOCOL_SSLv3)\n    14  ssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1)\n\nSee\n    also\n\n  - `ssl_with_bad_defaults()`\n\n  - `ssl_with_no_version()`\n\n  - <http://heartbleed.com/>\n\n  - <https://poodlebleed.com/>\n\n  - <https://security.openstack.org/>\n\n  - <https://security.openstack.org/guidelines/dg_move-data-securely.html>\n\nNew in version 0.9.0."},{"id":"Bandit_B503","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"ssl_with_bad_defaults","subCategory":"SSL","description":"B503: Test for SSL use with bad defaults specified","explanation":"**B503: Test for SSL use with bad defaults specified**\n\nThis plugin is part of a family of tests that detect the use of known\nbad versions of SSL/TLS, please see ../plugins/ssl\\_with\\_bad\\_version\nfor a complete discussion. Specifically, this plugin test scans for\nPython methods with default parameter values that specify the use of\nbroken SSL/TLS protocol versions. Currently, detection supports methods\nusing Python’s native SSL/TLS support and the pyOpenSSL module. A MEDIUM\nseverity warning will be reported whenever known broken protocol\nversions are detected.\n\n**Config Options:**\n\nThis test shares the configuration provided for the standard\n../plugins/ssl\\_with\\_bad\\_version test, please refer to its\ndocumentation.\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: Function definition identified with insecure SSL/TLS protocol\n    version by default, possible security issue.\n       Severity: Medium   Confidence: Medium\n       Location: ./examples/ssl-insecure-version.py:28\n    27\n    28  def open_ssl_socket(version=SSL.SSLv2_METHOD):\n    29      pass\n\nSee\n    also\n\n  - `ssl_with_bad_version()`\n\n  - `ssl_with_no_version()`\n\n  - <http://heartbleed.com/>\n\n  - <https://poodlebleed.com/>\n\n  - <https://security.openstack.org/>\n\n  - <https://security.openstack.org/guidelines/dg_move-data-securely.html>\n\nNew in version 0.9.0."},{"id":"Bandit_B504","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"ssl_with_no_version","subCategory":"SSL","description":"B504: Test for SSL use with no version specified","explanation":"**B504: Test for SSL use with no version specified**\n\nThis plugin is part of a family of tests that detect the use of known\nbad versions of SSL/TLS, please see ../plugins/ssl\\_with\\_bad\\_version\nfor a complete discussion. Specifically, This plugin test scans for\nspecific methods in Python’s native SSL/TLS support and the pyOpenSSL\nmodule that configure the version of SSL/TLS protocol to use. These\nmethods are known to provide default value that maximize compatibility,\nbut permit use of the aforementioned broken protocol versions. A LOW\nseverity warning will be reported whenever this is detected.\n\n**Config Options:**\n\nThis test shares the configuration provided for the standard\n../plugins/ssl\\_with\\_bad\\_version test, please refer to its\ndocumentation.\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: ssl.wrap_socket call with no SSL/TLS protocol version\n    specified, the default SSLv23 could be insecure, possible security\n    issue.\n       Severity: Low   Confidence: Medium\n       Location: ./examples/ssl-insecure-version.py:23\n    22\n    23  ssl.wrap_socket()\n    24\n\nSee\n    also\n\n  - `ssl_with_bad_version()`\n\n  - `ssl_with_bad_defaults()`\n\n  - <http://heartbleed.com/>\n\n  - <https://poodlebleed.com/>\n\n  - <https://security.openstack.org/>\n\n  - <https://security.openstack.org/guidelines/dg_move-data-securely.html>\n\nNew in version 0.9.0."},{"id":"Bandit_B505","category":"Security","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"weak_cryptographic_key","subCategory":"Cryptography","description":"B505: Test for weak cryptographic key use¶","explanation":"## B505: Test for weak cryptographic key use[¶](#b505-test-for-weak-cryptographic-key-use \"Permalink to this headline\")\n\nAs computational power increases, so does the ability to break ciphers\nwith smaller key lengths. The recommended key length size for RSA and\nDSA algorithms is 2048 and higher. 1024 bits and below are now\nconsidered breakable. EC key length sizes are recommended to be 224 and\nhigher with 160 and below considered breakable. This plugin test checks\nfor use of any key less than those limits and returns a high severity\nerror if lower than the lower threshold and a medium severity error for\nthose lower than the higher threshold."},{"id":"Bandit_B506","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"yaml_load","subCategory":"InputValidation","description":"B506: Test for use of yaml load¶","explanation":"## B506: Test for use of yaml load[¶](#b506-test-for-use-of-yaml-load \"Permalink to this headline\")\n\nThis plugin test checks for the unsafe usage of the `yaml.load` function\nfrom the PyYAML package. The yaml.load function provides the ability to\nconstruct an arbitrary Python object, which may be dangerous if you\nreceive a YAML document from an untrusted source. The function\nyaml.safe\\_load limits this ability to simple Python objects like\nintegers or lists.\n\nPlease see <http://pyyaml.org/wiki/PyYAMLDocumentation#LoadingYAML> for\nmore information on `yaml.load` and yaml.safe\\_load"},{"id":"Bandit_B507","category":"Security","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"ssh_no_host_key_verification","description":"B507: Test for missing host key validation¶","explanation":"## B507: Test for missing host key validation[¶](#b507-test-for-missing-host-key-validation \"Permalink to this headline\")\n\nEncryption in general is typically critical to the security of many\napplications. Using SSH can greatly increase security by guaranteeing\nthe identity of the party you are communicating with. This is\naccomplished by one or both parties presenting trusted host keys during\nthe connection initialization phase of SSH.\n\nWhen paramiko methods are used, host keys are verified by default. If\nhost key verification is disabled, Bandit will return a HIGH severity\nerror."},{"id":"Bandit_B601","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"paramiko_calls","subCategory":"CommandInjection","description":"B601: Test for shell injection within Paramiko¶","explanation":"## B601: Test for shell injection within Paramiko[¶](#b601-test-for-shell-injection-within-paramiko \"Permalink to this headline\")\n\nParamiko is a Python library designed to work with the SSH2 protocol for\nsecure (encrypted and authenticated) connections to remote machines. It\nis intended to run commands on a remote host. These commands are run\nwithin a shell on the target and are thus vulnerable to various shell\ninjection attacks. Bandit reports a MEDIUM issue when it detects the use\nof Paramiko’s “exec\\_command” method advising the user to check inputs\nare correctly sanitized."},{"id":"Bandit_B602","category":"Security","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"subprocess_popen_with_shell_equals_true","subCategory":"CommandInjection","description":"B602: Test for use of popen with shell equals true","explanation":"**B602: Test for use of popen with shell equals true**\n\nPython possesses many mechanisms to invoke an external executable.\nHowever, doing so may present a security issue if appropriate care is\nnot taken to sanitize any user provided or variable input.\n\nThis plugin test is part of a family of tests built to check for process\nspawning and warn appropriately. Specifically, this test looks for the\nspawning of a subprocess using a command shell. This type of subprocess\ninvocation is dangerous as it is vulnerable to various shell injection\nattacks. Great care should be taken to sanitize all input in order to\nmitigate this risk. Calls of this type are identified by a parameter of\n‘shell=True’ being given.\n\nAdditionally, this plugin scans the command string given and adjusts its\nreported severity based on how it is presented. If the command string is\na simple static string containing no special shell characters, then the\nresulting issue has low severity. If the string is static, but contains\nshell formatting characters or wildcards, then the reported issue is\nmedium. Finally, if the string is computed using Python’s string\nmanipulation or formatting operations, then the reported issue has high\nseverity. These severity levels reflect the likelihood that the code is\nvulnerable to injection.\n\nSee also:\n\n  - ../plugins/linux\\_commands\\_wildcard\\_injection\n\n  - ../plugins/subprocess\\_without\\_shell\\_equals\\_true\n\n  - ../plugins/start\\_process\\_with\\_no\\_shell\n\n  - ../plugins/start\\_process\\_with\\_a\\_shell\n\n  - ../plugins/start\\_process\\_with\\_partial\\_path\n\n**Config Options:**\n\nThis plugin test shares a configuration with others in the same family,\nnamely shell\\_injection. This configuration is divided up into three\nsections, subprocess, shell and no\\_shell. They each list Python calls\nthat spawn subprocesses, invoke commands within a shell, or invoke\ncommands without a shell (by replacing the calling process)\nrespectively.\n\nThis plugin specifically scans for methods listed in subprocess section\nthat have shell=True specified.\n\n    shell_injection:\n    \n        # Start a process using the subprocess module, or one of its\n        wrappers.\n        subprocess:\n            - subprocess.Popen\n            - subprocess.call\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: subprocess call with shell=True seems safe, but may be\n    changed in the future, consider rewriting without shell\n       Severity: Low   Confidence: High\n       Location: ./examples/subprocess_shell.py:21\n    20  subprocess.check_call(['/bin/ls', '-l'], shell=False)\n    21  subprocess.check_call('/bin/ls -l', shell=True)\n    22\n    \n    >> Issue: call with shell=True contains special shell characters,\n    consider moving extra logic into Python code\n       Severity: Medium   Confidence: High\n       Location: ./examples/subprocess_shell.py:26\n    25\n    26  subprocess.Popen('/bin/ls *', shell=True)\n    27  subprocess.Popen('/bin/ls %s' % ('something',), shell=True)\n    \n    >> Issue: subprocess call with shell=True identified, security issue.\n       Severity: High   Confidence: High\n       Location: ./examples/subprocess_shell.py:27\n    26  subprocess.Popen('/bin/ls *', shell=True)\n    27  subprocess.Popen('/bin/ls %s' % ('something',), shell=True)\n    28  subprocess.Popen('/bin/ls {}'.format('something'), shell=True)\n\nSee\n    also\n\n  - <https://security.openstack.org>\n\n  - <https://docs.python.org/3/library/subprocess.html#frequently-used-arguments>\n\n  - <https://security.openstack.org/guidelines/dg_use-subprocess-securely.html>\n\n  - <https://security.openstack.org/guidelines/dg_avoid-shell-true.html>\n\nNew in version 0.9.0."},{"id":"Bandit_B603","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"subprocess_without_shell_equals_true","subCategory":"CommandInjection","description":"B603: Test for use of subprocess without shell equals true","explanation":"**B603: Test for use of subprocess without shell equals true**\n\nPython possesses many mechanisms to invoke an external executable.\nHowever, doing so may present a security issue if appropriate care is\nnot taken to sanitize any user provided or variable input.\n\nThis plugin test is part of a family of tests built to check for process\nspawning and warn appropriately. Specifically, this test looks for the\nspawning of a subprocess without the use of a command shell. This type\nof subprocess invocation is not vulnerable to shell injection attacks,\nbut care should still be taken to ensure validity of input.\n\nBecause this is a lesser issue than that described in\nsubprocess\\_popen\\_with\\_shell\\_equals\\_true a LOW severity warning is\nreported.\n\nSee also:\n\n  - ../plugins/linux\\_commands\\_wildcard\\_injection\n\n  - ../plugins/subprocess\\_popen\\_with\\_shell\\_equals\\_true\n\n  - ../plugins/start\\_process\\_with\\_no\\_shell\n\n  - ../plugins/start\\_process\\_with\\_a\\_shell\n\n  - ../plugins/start\\_process\\_with\\_partial\\_path\n\n**Config Options:**\n\nThis plugin test shares a configuration with others in the same family,\nnamely shell\\_injection. This configuration is divided up into three\nsections, subprocess, shell and no\\_shell. They each list Python calls\nthat spawn subprocesses, invoke commands within a shell, or invoke\ncommands without a shell (by replacing the calling process)\nrespectively.\n\nThis plugin specifically scans for methods listed in subprocess section\nthat have shell=False specified.\n\n    shell_injection:\n        # Start a process using the subprocess module, or one of its\n        wrappers.\n        subprocess:\n            - subprocess.Popen\n            - subprocess.call\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: subprocess call - check for execution of untrusted input.\n       Severity: Low   Confidence: High\n       Location: ./examples/subprocess_shell.py:23\n    22\n    23    subprocess.check_output(['/bin/ls', '-l'])\n    24\n\nSee\n    also\n\n  - <https://security.openstack.org>\n\n  - <https://docs.python.org/3/library/subprocess.html#frequently-used-arguments>\n\n  - <https://security.openstack.org/guidelines/dg_avoid-shell-true.html>\n\n  - <https://security.openstack.org/guidelines/dg_use-subprocess-securely.html>\n\nNew in version 0.9.0."},{"id":"Bandit_B604","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"any_other_function_with_shell_equals_true","subCategory":"CommandInjection","description":"B604: Test for any function with shell equals true","explanation":"**B604: Test for any function with shell equals true**\n\nPython possesses many mechanisms to invoke an external executable.\nHowever, doing so may present a security issue if appropriate care is\nnot taken to sanitize any user provided or variable input.\n\nThis plugin test is part of a family of tests built to check for process\nspawning and warn appropriately. Specifically, this plugin test\ninterrogates method calls for the presence of a keyword parameter shell\nequalling true. It is related to detection of shell injection issues and\nis intended to catch custom wrappers to vulnerable methods that may have\nbeen created.\n\nSee also:\n\n  - ../plugins/linux\\_commands\\_wildcard\\_injection\n\n  - ../plugins/subprocess\\_popen\\_with\\_shell\\_equals\\_true\n\n  - ../plugins/subprocess\\_without\\_shell\\_equals\\_true\n\n  - ../plugins/start\\_process\\_with\\_no\\_shell\n\n  - ../plugins/start\\_process\\_with\\_a\\_shell\n\n  - ../plugins/start\\_process\\_with\\_partial\\_path\n\n**Config Options:**\n\nThis plugin test shares a configuration with others in the same family,\nnamely shell\\_injection. This configuration is divided up into three\nsections, subprocess, shell and no\\_shell. They each list Python calls\nthat spawn subprocesses, invoke commands within a shell, or invoke\ncommands without a shell (by replacing the calling process)\nrespectively.\n\nSpecifically, this plugin excludes those functions listed under the\nsubprocess section, these methods are tested in a separate specific test\nplugin and this exclusion prevents duplicate issue reporting.\n\n    shell_injection:\n        # Start a process using the subprocess module, or one of its\n        wrappers.\n        subprocess: [subprocess.Popen, subprocess.call,\n                     subprocess.check_call, subprocess.check_output\n                     execute_with_timeout]\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: Function call with shell=True parameter identified, possible\n    security issue.\n       Severity: Medium   Confidence: High\n       Location: ./examples/subprocess_shell.py:9\n    8 pop('/bin/gcc --version', shell=True)\n    9 Popen('/bin/gcc --version', shell=True)\n    10\n\nSee\n    also\n\n  - <https://security.openstack.org/guidelines/dg_avoid-shell-true.html>\n\n  - <https://security.openstack.org/guidelines/dg_use-subprocess-securely.html>\n\nNew in version 0.9.0."},{"id":"Bandit_B605","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"start_process_with_a_shell","subCategory":"CommandInjection","description":"B605: Test for starting a process with a shell","explanation":"**B605: Test for starting a process with a shell**\n\nPython possesses many mechanisms to invoke an external executable.\nHowever, doing so may present a security issue if appropriate care is\nnot taken to sanitize any user provided or variable input.\n\nThis plugin test is part of a family of tests built to check for process\nspawning and warn appropriately. Specifically, this test looks for the\nspawning of a subprocess using a command shell. This type of subprocess\ninvocation is dangerous as it is vulnerable to various shell injection\nattacks. Great care should be taken to sanitize all input in order to\nmitigate this risk. Calls of this type are identified by the use of\ncertain commands which are known to use shells. Bandit will report a LOW\nseverity warning.\n\nSee also:\n\n  - ../plugins/linux\\_commands\\_wildcard\\_injection\n\n  - ../plugins/subprocess\\_without\\_shell\\_equals\\_true\n\n  - ../plugins/start\\_process\\_with\\_no\\_shell\n\n  - ../plugins/start\\_process\\_with\\_partial\\_path\n\n  - ../plugins/subprocess\\_popen\\_with\\_shell\\_equals\\_true\n\n**Config Options:**\n\nThis plugin test shares a configuration with others in the same family,\nnamely shell\\_injection. This configuration is divided up into three\nsections, subprocess, shell and no\\_shell. They each list Python calls\nthat spawn subprocesses, invoke commands within a shell, or invoke\ncommands without a shell (by replacing the calling process)\nrespectively.\n\nThis plugin specifically scans for methods listed in shell section.\n\n    shell_injection:\n        shell:\n            - os.system\n            - os.popen\n            - os.popen2\n            - os.popen3\n            - os.popen4\n            - popen2.popen2\n            - popen2.popen3\n            - popen2.popen4\n            - popen2.Popen3\n            - popen2.Popen4\n            - commands.getoutput\n            - commands.getstatusoutput\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: Starting a process with a shell: check for injection.\n       Severity: Low   Confidence: Medium\n       Location: examples/os_system.py:3\n    2\n    3   os.system('/bin/echo hi')\n\nSee\n    also\n\n  - <https://security.openstack.org>\n\n  - <https://docs.python.org/3/library/os.html#os.system>\n\n  - <https://docs.python.org/3/library/subprocess.html#frequently-used-arguments>\n\n  - <https://security.openstack.org/guidelines/dg_use-subprocess-securely.html>\n\nNew in version 0.10.0."},{"id":"Bandit_B606","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"start_process_with_no_shell","subCategory":"CommandInjection","description":"B606: Test for starting a process with no shell","explanation":"**B606: Test for starting a process with no shell**\n\nPython possesses many mechanisms to invoke an external executable.\nHowever, doing so may present a security issue if appropriate care is\nnot taken to sanitize any user provided or variable input.\n\nThis plugin test is part of a family of tests built to check for process\nspawning and warn appropriately. Specifically, this test looks for the\nspawning of a subprocess in a way that doesn’t use a shell. Although\nthis is generally safe, it maybe useful for penetration testing\nworkflows to track where external system calls are used. As such a LOW\nseverity message is generated.\n\nSee also:\n\n  - ../plugins/linux\\_commands\\_wildcard\\_injection\n\n  - ../plugins/subprocess\\_without\\_shell\\_equals\\_true\n\n  - ../plugins/start\\_process\\_with\\_a\\_shell\n\n  - ../plugins/start\\_process\\_with\\_partial\\_path\n\n  - ../plugins/subprocess\\_popen\\_with\\_shell\\_equals\\_true\n\n**Config Options:**\n\nThis plugin test shares a configuration with others in the same family,\nnamely shell\\_injection. This configuration is divided up into three\nsections, subprocess, shell and no\\_shell. They each list Python calls\nthat spawn subprocesses, invoke commands within a shell, or invoke\ncommands without a shell (by replacing the calling process)\nrespectively.\n\nThis plugin specifically scans for methods listed in no\\_shell section.\n\n    shell_injection:\n        no_shell:\n            - os.execl\n            - os.execle\n            - os.execlp\n            - os.execlpe\n            - os.execv\n            - os.execve\n            - os.execvp\n            - os.execvpe\n            - os.spawnl\n            - os.spawnle\n            - os.spawnlp\n            - os.spawnlpe\n            - os.spawnv\n            - os.spawnve\n            - os.spawnvp\n            - os.spawnvpe\n            - os.startfile\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: [start_process_with_no_shell] Starting a process without a\n       shell.\n       Severity: Low   Confidence: Medium\n       Location: examples/os-spawn.py:8\n    7   os.spawnv(mode, path, args)\n    8   os.spawnve(mode, path, args, env)\n    9   os.spawnvp(mode, file, args)\n\nSee\n    also\n\n  - <https://security.openstack.org>\n\n  - <https://docs.python.org/3/library/os.html#os.system>\n\n  - <https://docs.python.org/3/library/subprocess.html#frequently-used-arguments>\n\n  - <https://security.openstack.org/guidelines/dg_use-subprocess-securely.html>\n\nNew in version 0.10.0."},{"id":"Bandit_B607","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"start_process_with_partial_path","subCategory":"CommandInjection","description":"B607: Test for starting a process with a partial path","explanation":"**B607: Test for starting a process with a partial path**\n\nPython possesses many mechanisms to invoke an external executable. If\nthe desired executable path is not fully qualified relative to the\nfilesystem root then this may present a potential security risk.\n\nIn POSIX environments, the PATH environment variable is used to specify\na set of standard locations that will be searched for the first matching\nnamed executable. While convenient, this behavior may allow a malicious\nactor to exert control over a system. If they are able to adjust the\ncontents of the PATH variable, or manipulate the file system, then a\nbogus executable may be discovered in place of the desired one. This\nexecutable will be invoked with the user privileges of the Python\nprocess that spawned it, potentially a highly privileged user.\n\nThis test will scan the parameters of all configured Python methods,\nlooking for paths that do not start at the filesystem root, that is, do\nnot have a leading ‘/’ character.\n\n**Config Options:**\n\nThis plugin test shares a configuration with others in the same family,\nnamely shell\\_injection. This configuration is divided up into three\nsections, subprocess, shell and no\\_shell. They each list Python calls\nthat spawn subprocesses, invoke commands within a shell, or invoke\ncommands without a shell (by replacing the calling process)\nrespectively.\n\nThis test will scan parameters of all methods in all sections. Note that\nmethods are fully qualified and de-aliased prior to checking.\n\n    shell_injection:\n        # Start a process using the subprocess module, or one of its\n        wrappers.\n        subprocess:\n            - subprocess.Popen\n            - subprocess.call\n    \n        # Start a process with a function vulnerable to shell injection.\n        shell:\n            - os.system\n            - os.popen\n            - popen2.Popen3\n            - popen2.Popen4\n            - commands.getoutput\n            - commands.getstatusoutput\n        # Start a process with a function that is not vulnerable to shell\n        injection.\n        no_shell:\n            - os.execl\n            - os.execle\n\n  - Example  \n\n<!-- end list -->\n\n    >> Issue: Starting a process with a partial executable path\n    Severity: Low   Confidence: High\n    Location: ./examples/partial_path_process.py:3\n    2    from subprocess import Popen as pop\n    3    pop('gcc --version', shell=False)\n\nSee also\n\n  - <https://security.openstack.org>\n\n  - <https://docs.python.org/3/library/os.html#process-management>\n\nNew in version 0.13.0."},{"id":"Bandit_B608","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"hardcoded_sql_expressions","subCategory":"SQLInjection","description":"B608: Test for SQL injection¶","explanation":"## B608: Test for SQL injection[¶](#b608-test-for-sql-injection \"Permalink to this headline\")\n\nAn SQL injection attack consists of insertion or “injection” of a SQL\nquery via the input data given to an application. It is a very common\nattack vector. This plugin test looks for strings that resemble SQL\nstatements that are involved in some form of string building operation.\nFor example:\n\nUnless care is taken to sanitize and control the input data when\nbuilding such SQL statement strings, an injection attack becomes\npossible. If strings of this nature are discovered, a LOW confidence\nissue is reported. In order to boost result confidence, this plugin test\nwill also check to see if the discovered string is in use with standard\nPython DBAPI calls execute or executemany. If so, a MEDIUM issue is\nreported. For example:"},{"id":"Bandit_B609","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"linux_commands_wildcard_injection","subCategory":"InputValidation","description":"B609: Test for use of wildcard injection¶","explanation":"## B609: Test for use of wildcard injection[¶](#b609-test-for-use-of-wildcard-injection \"Permalink to this headline\")\n\nPython provides a number of methods that emulate the behavior of\nstandard Linux command line utilities. Like their Linux counterparts,\nthese commands may take a wildcard “\\*” character in place of a file\nsystem path. This is interpreted to mean “any and all files or folders”\nand can be used to build partially qualified paths, such as\n“/home/user/\\*”.\n\nThe use of partially qualified paths may result in unintended\nconsequences if an unexpected file or symlink is placed into the path\nlocation given. This becomes particularly dangerous when combined with\ncommands used to manipulate file permissions or copy data off of a\nsystem.\n\nThis test plugin looks for usage of the following commands in\nconjunction with wild card parameters:\n\nAs well as any method configured in the shell or subprocess injection\ntest configurations.\n\n**Config Options:**\n\nThis plugin test shares a configuration with others in the same family,\nnamely shell\\_injection. This configuration is divided up into three\nsections, subprocess, shell and no\\_shell. They each list Python calls\nthat spawn subprocesses, invoke commands within a shell, or invoke\ncommands without a shell (by replacing the calling process)\nrespectively.\n\nThis test will scan parameters of all methods in all sections. Note that\nmethods are fully qualified and de-aliased prior to checking."},{"id":"Bandit_B610","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"django_extra_used","description":"B610: Potential SQL injection on extra function","explanation":"**B610: Potential SQL injection on extra function**\n\nSee\n    also\n\n  - <https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection>\n\nNew in version 1.5.0."},{"id":"Bandit_B611","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"django_rawsql_used","description":"B611: Potential SQL injection on RawSQL function","explanation":"**B611: Potential SQL injection on RawSQL function**\n\nSee\n    also\n\n  - <https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection>\n\nNew in version 1.5.0."},{"id":"Bandit_B701","category":"Security","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"jinja2_autoescape_false","subCategory":"XSS","description":"B701: Test for not auto escaping in jinja2¶","explanation":"## B701: Test for not auto escaping in jinja2[¶](#b701-test-for-not-auto-escaping-in-jinja2 \"Permalink to this headline\")\n\nJinja2 is a Python HTML templating system. It is typically used to build\nweb applications, though appears in other places well, notably the\nAnsible automation system. When configuring the Jinja2 environment, the\noption to use autoescaping on input can be specified. When autoescaping\nis enabled, Jinja2 will filter input strings to escape any HTML content\nsubmitted via template variables. Without escaping HTML input the\napplication becomes vulnerable to Cross Site Scripting (XSS) attacks.\n\nUnfortunately, autoescaping is False by default. Thus this plugin test\nwill warn on omission of an autoescape setting, as well as an explicit\nsetting of false. A HIGH severity warning is generated in either of\nthese scenarios."},{"id":"Bandit_B702","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"use_of_mako_templates","subCategory":"XSS","description":"B702: Test for use of mako templates¶","explanation":"## B702: Test for use of mako templates[¶](#b702-test-for-use-of-mako-templates \"Permalink to this headline\")\n\nMako is a Python templating system often used to build web applications.\nIt is the default templating system used in Pylons and Pyramid. Unlike\nJinja2 (an alternative templating system), Mako has no environment wide\nvariable escaping mechanism. Because of this, all input variables must\nbe carefully escaped before use to prevent possible vulnerabilities to\nCross Site Scripting (XSS) attacks."},{"id":"Bandit_B703","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"django_mark_safe","description":"B703: Potential XSS on mark_safe function","explanation":"**B703: Potential XSS on mark\\_safe function**\n\nSee\n    also\n\n  - <https://docs.djangoproject.com/en/dev/topics/security/#cross-site-scripting-xss-protection>\n\n  - <https://docs.djangoproject.com/en/dev/ref/utils/#module-django.utils.safestring>\n\n  - <https://docs.djangoproject.com/en/dev/ref/utils/#django.utils.html.format_html>\n\nNew in version 1.5.0."}],"pagination":{"limit":100,"total":72}}