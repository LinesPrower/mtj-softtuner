{"data":[{"id":"PyLint_W0603","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"global-statement (W0603)","description":"Using the global statement. Used when you use the “global” statement to update a global variable. Pylint just try to discourage this usage. That doesn’t mean you cannot use it !","explanation":"# global-statement (W0603)\n\n*Using the global statement* Used when you use the “global” statement to\nupdate a global variable. Pylint just try to discourage this usage. That\ndoesn’t mean you cannot use it \\!"},{"id":"PyLint_W0604","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"global-at-module-level (W0604)","description":"Using the global statement at the module level. Used when you use the “global” statement at the module level since it has no effect","explanation":"# global-at-module-level (W0604)\n\n*Using the global statement at the module level* Used when you use the\n“global” statement at the module level since it has no effect"},{"id":"PyLint_W0611","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"unused-import (W0611)","description":"Unused %s. Used when an imported module or variable is not used.","explanation":"# unused-import (W0611)\n\n*Unused %s* Used when an imported module or variable is not used."},{"id":"PyLint_W0612","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"unused-variable (W0612)","description":"Unused variable %r. Used when a variable is defined but not used.","explanation":"# unused-variable (W0612)\n\n*Unused variable %r* Used when a variable is defined but not used."},{"id":"PyLint_W0613","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"unused-argument (W0613)","description":"Unused argument %r. Used when a function or method argument is not used.","explanation":"# unused-argument (W0613)\n\n*Unused argument %r* Used when a function or method argument is not\nused."},{"id":"PyLint_W0614","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"unused-wildcard-import (W0614)","description":"Unused import %s from wildcard import. Used when an imported module or variable is not used from a ‘from X import *’ style import.","explanation":"# unused-wildcard-import (W0614)\n\n*Unused import %s from wildcard import* Used when an imported module or\nvariable is not used from a ‘from X import \\*’ style import."},{"id":"PyLint_W0621","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"redefined-outer-name (W0621)","description":"Redefining name %r from outer scope (line %s). Used when a variable’s name hides a name defined in the outer scope.","explanation":"# redefined-outer-name (W0621)\n\n*Redefining name %r from outer scope (line %s)* Used when a variable’s\nname hides a name defined in the outer scope."},{"id":"PyLint_W0622","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"redefined-builtin (W0622)","description":"Redefining built-in %r. Used when a variable or function override a built-in.","explanation":"# redefined-builtin (W0622)\n\n*Redefining built-in %r* Used when a variable or function override a\nbuilt-in."},{"id":"PyLint_W0623","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"redefine-in-handler (W0623)","description":"Redefining name %r from %s in exception handler. Used when an exception handler assigns the exception to an existing name","explanation":"# redefine-in-handler (W0623)\n\n*Redefining name %r from %s in exception handler* Used when an exception\nhandler assigns the exception to an existing name"},{"id":"PyLint_W0631","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"undefined-loop-variable (W0631)","description":"Using possibly undefined loop variable %r. Used when an loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.","explanation":"# undefined-loop-variable (W0631)\n\n*Using possibly undefined loop variable %r* Used when an loop variable\n(i.e. defined by a for loop or a list comprehension or a generator\nexpression) is used outside the loop."},{"id":"PyLint_W0640","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"cell-var-from-loop (W0640)","description":"Cell variable %s defined in loop. A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.","explanation":"# cell-var-from-loop (W0640)\n\n*Cell variable %s defined in loop* A variable used in a closure is\ndefined in a loop. This will result in all closures using the same value\nfor the closed-over variable."},{"id":"PyLint_W0702","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"bare-except (W0702)","description":"No exception type(s) specified. Used when an except clause doesn’t specify exceptions type to catch.","explanation":"# bare-except (W0702)\n\n*No exception type(s) specified* Used when an except clause doesn’t\nspecify exceptions type to catch."},{"id":"PyLint_W0703","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"broad-except (W0703)","description":"Catching too general exception %s. Used when an except catches a too general exception, possibly burying unrelated errors.","explanation":"# broad-except (W0703)\n\n*Catching too general exception %s* Used when an except catches a too\ngeneral exception, possibly burying unrelated errors."},{"id":"PyLint_W0705","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"duplicate-except (W0705)","description":"Catching previously caught exception type %s. Used when an except catches a type that was already caught by a previous handler.","explanation":"# duplicate-except (W0705)\n\n*Catching previously caught exception type %s* Used when an except\ncatches a type that was already caught by a previous handler."},{"id":"PyLint_W0710","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"nonstandard-exception (W0710)","description":"Exception doesn’t inherit from standard “Exception” class. Used when a custom exception class is raised but doesn’t inherit from the builtin “Exception” class. This message can’t be emitted when using Python >= 3.0.","explanation":"# nonstandard-exception (W0710)\n\n*Exception doesn’t inherit from standard “Exception” class* Used when a\ncustom exception class is raised but doesn’t inherit from the builtin\n“Exception” class. This message can’t be emitted when using Python \\>=\n3.0."},{"id":"PyLint_W0711","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"binary-op-exception (W0711)","description":"Exception to catch is the result of a binary “%s” operation. Used when the exception to catch is of the form “except A or B:”. If intending to catch multiple, rewrite as “except (A, B):”","explanation":"# binary-op-exception (W0711)\n\n*Exception to catch is the result of a binary “%s” operation* Used when\nthe exception to catch is of the form “except A or B:”. If intending to\ncatch multiple, rewrite as “except (A, B):”"},{"id":"PyLint_W0715","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"raising-format-tuple (W0715)","description":"Exception arguments suggest string formatting might be intended. Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting","explanation":"# raising-format-tuple (W0715)\n\n*Exception arguments suggest string formatting might be intended* Used\nwhen passing multiple arguments to an exception constructor, the first\nof them a string literal containing what appears to be placeholders\nintended for formatting"},{"id":"PyLint_W1001","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"property-on-old-class (W1001)","description":"Use of “property” on an old style class. Used when Pylint detect the use of the builtin “property” on an old style class while this is relying on new style classes features. This message can’t be emitted when using Python >= 3.0.","explanation":"# property-on-old-class (W1001)\n\n*Use of “property” on an old style class* Used when Pylint detect the\nuse of the builtin “property” on an old style class while this is\nrelying on new style classes features. This message can’t be emitted\nwhen using Python \\>= 3.0."},{"id":"PyLint_W1113","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"keyword-arg-before-vararg (W1113)","description":"Keyword argument before variable positional arguments list in the definition of %s function. When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.","explanation":"# keyword-arg-before-vararg (W1113)\n\n*Keyword argument before variable positional arguments list in the\ndefinition of %s function* When defining a keyword argument before\nvariable positional arguments, one can end up in having multiple values\npassed for the aforementioned parameter in case the method is called\nwith keyword arguments."},{"id":"PyLint_W1201","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"logging-not-lazy (W1201)","description":"Specify string format arguments as logging function parameters. Used when a logging statement has a call form of “logging.<logging method>(format_string % (format_args…))”. Such calls should leave string interpolation to the logging method itself and be written “logging.<logging method>(format_string, format_args…)” so that the program may avoid incurring the cost of the interpolation in those cases in which no message will be logged. For more, see http://www.python.org/dev/peps/pep-0282/.","explanation":"# logging-not-lazy (W1201)\n\n*Specify string format arguments as logging function parameters* Used\nwhen a logging statement has a call form of “logging.\\<logging\nmethod\\>(format\\_string % (format\\_args…))”. Such calls should leave\nstring interpolation to the logging method itself and be written\n“logging.\\<logging method\\>(format\\_string, format\\_args…)” so that\nthe program may avoid incurring the cost of the interpolation in those\ncases in which no message will be logged. For more, see\n<http://www.python.org/dev/peps/pep-0282/>."},{"id":"PyLint_W1202","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"logging-format-interpolation (W1202)","description":"Use % formatting in logging functions and pass the % parameters as arguments. Used when a logging statement has a call form of “logging.<logging method>(format_string.format(format_args…))”. Such calls should use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.","explanation":"# logging-format-interpolation (W1202)\n\n*Use % formatting in logging functions and pass the % parameters as\narguments* Used when a logging statement has a call form of\n“logging.\\<logging method\\>(format\\_string.format(format\\_args…))”.\nSuch calls should use % formatting instead, but leave interpolation to\nthe logging function by passing the parameters as arguments."},{"id":"PyLint_W1300","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"bad-format-string-key (W1300)","description":"Format string dictionary key should be a string, not %s. Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.","explanation":"# bad-format-string-key (W1300)\n\n*Format string dictionary key should be a string, not %s* Used when a\nformat string that uses named conversion specifiers is used with a\ndictionary whose keys are not all strings."},{"id":"PyLint_W1301","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"unused-format-string-key (W1301)","description":"Unused key %r in format string dictionary. Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.","explanation":"# unused-format-string-key (W1301)\n\n*Unused key %r in format string dictionary* Used when a format string\nthat uses named conversion specifiers is used with a dictionary that\ncontains keys not required by the format string."},{"id":"PyLint_W1302","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"bad-format-string (W1302)","description":"Invalid format string. Used when a PEP 3101 format string is invalid. This message can’t be emitted when using Python < 2.7.","explanation":"# bad-format-string (W1302)\n\n*Invalid format string* Used when a PEP 3101 format string is invalid.\nThis message can’t be emitted when using Python \\< 2.7."},{"id":"PyLint_W1303","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"missing-format-argument-key (W1303)","description":"Missing keyword argument %r for format string. Used when a PEP 3101 format string that uses named fields doesn’t receive one or more required keywords. This message can’t be emitted when using Python < 2.7.","explanation":"# missing-format-argument-key (W1303)\n\n*Missing keyword argument %r for format string* Used when a PEP 3101\nformat string that uses named fields doesn’t receive one or more\nrequired keywords. This message can’t be emitted when using Python \\<\n2.7."},{"id":"PyLint_W1304","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"unused-format-string-argument (W1304)","description":"Unused format argument %r. Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string. This message can’t be emitted when using Python < 2.7.","explanation":"# unused-format-string-argument (W1304)\n\n*Unused format argument %r* Used when a PEP 3101 format string that uses\nnamed fields is used with an argument that is not required by the format\nstring. This message can’t be emitted when using Python \\< 2.7."},{"id":"PyLint_W1305","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"format-combined-specification (W1305)","description":"Format string contains both automatic field numbering and manual field specification. Used when a PEP 3101 format string contains both automatic field numbering (e.g. ‘{}’) and manual field specification (e.g. ‘{0}’). This message can’t be emitted when using Python < 2.7.","explanation":"# format-combined-specification (W1305)\n\n*Format string contains both automatic field numbering and manual field\nspecification* Used when a PEP 3101 format string contains both\nautomatic field numbering (e.g. ‘{}’) and manual field specification\n(e.g. ‘{0}’). This message can’t be emitted when using Python \\< 2.7."},{"id":"PyLint_W1306","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"missing-format-attribute (W1306)","description":"Missing format attribute %r in format specifier %r. Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn’t have that attribute. This message can’t be emitted when using Python < 2.7.","explanation":"# missing-format-attribute (W1306)\n\n*Missing format attribute %r in format specifier %r* Used when a PEP\n3101 format string uses an attribute specifier ({0.length}), but the\nargument passed for formatting doesn’t have that attribute. This message\ncan’t be emitted when using Python \\< 2.7."},{"id":"PyLint_W1307","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"invalid-format-index (W1307)","description":"Using invalid lookup key %r in format specifier %r. Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn’t contain or doesn’t have that key as an attribute. This message can’t be emitted when using Python < 2.7.","explanation":"# invalid-format-index (W1307)\n\n*Using invalid lookup key %r in format specifier %r* Used when a PEP\n3101 format string uses a lookup specifier ({a\\[1\\]}), but the argument\npassed for formatting doesn’t contain or doesn’t have that key as an\nattribute. This message can’t be emitted when using Python \\< 2.7."},{"id":"PyLint_W1401","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"anomalous-backslash-in-string (W1401)","description":"Anomalous backslash in string: ‘%s’. String constant might be missing an r prefix. Used when a backslash is in a literal string but not as an escape.","explanation":"# anomalous-backslash-in-string (W1401)\n\n*Anomalous backslash in string: ‘%s’. String constant might be missing\nan r prefix.* Used when a backslash is in a literal string but not as an\nescape."},{"id":"PyLint_W1402","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"anomalous-unicode-escape-in-string (W1402)","description":"Anomalous Unicode escape in byte string: ‘%s’. String constant might be missing an r or u prefix. Used when an escape like u is encountered in a byte string where it has no effect.","explanation":"# anomalous-unicode-escape-in-string (W1402)\n\n*Anomalous Unicode escape in byte string: ‘%s’. String constant might be\nmissing an r or u prefix.* Used when an escape like u is encountered in\na byte string where it has no effect."},{"id":"PyLint_W1501","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"bad-open-mode (W1501)","description":"“%s” is not a valid mode for open. Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See http://docs.python.org/2/library/functions.html#open","explanation":"# bad-open-mode (W1501)\n\n*“%s” is not a valid mode for open.* Python supports: r, w, a\\[, x\\]\nmodes with b, +, and U (only with r) options. See\n<http://docs.python.org/2/library/functions.html#open>"},{"id":"PyLint_W1502","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"boolean-datetime (W1502)","description":"Using datetime.time in a boolean context. Using datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See http://bugs.python.org/issue13936 for reference. This message can’t be emitted when using Python >= 3.5.","explanation":"# boolean-datetime (W1502)\n\n*Using datetime.time in a boolean context.* Using datetime.time in a\nboolean context can hide subtle bugs when the time they represent\nmatches midnight UTC. This behaviour was fixed in Python 3.5. See\n<http://bugs.python.org/issue13936> for reference. This message can’t be\nemitted when using Python \\>= 3.5."},{"id":"PyLint_W1503","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"redundant-unittest-assert (W1503)","description":"Redundant use of %s with constant value %r. The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.","explanation":"# redundant-unittest-assert (W1503)\n\n*Redundant use of %s with constant value %r* The first argument of\nassertTrue and assertFalse is a condition. If a constant is passed as\nparameter, that condition will be always true. In this case a warning\nshould be emitted."},{"id":"PyLint_W1505","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"deprecated-method (W1505)","description":"Using deprecated method %s(). The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.","explanation":"# deprecated-method (W1505)\n\n*Using deprecated method %s()* The method is marked as deprecated and\nwill be removed in a future version of Python. Consider looking for an\nalternative in the documentation."},{"id":"PyLint_W1506","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"bad-thread-instantiation (W1506)","description":"threading.Thread needs the target function. The warning is emitted when a threading.Thread class is instantiated without the target function being passed. By default, the first parameter is the group param, not the target param.","explanation":"# bad-thread-instantiation (W1506)\n\n*threading.Thread needs the target function* The warning is emitted when\na threading.Thread class is instantiated without the target function\nbeing passed. By default, the first parameter is the group param, not\nthe target param."},{"id":"PyLint_W1507","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"shallow-copy-environ (W1507)","description":"*Using copy.copy(os.environ). Use os.environ.copy() instead. *. Os.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See https://bugs.python.org/issue15373 for reference.","explanation":"# shallow-copy-environ (W1507)\n\n[\\*](#id30)Using copy.copy(os.environ). Use os.environ.copy() instead.\n\\* os.environ is not a dict object but proxy object, so shallow copy has\nstill effects on original object. See\n<https://bugs.python.org/issue15373> for reference."},{"id":"PyLint_W1601","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"apply-builtin (W1601)","description":"apply built-in referenced. Used when the apply built-in function is referenced (missing from Python 3)","explanation":"# apply-builtin (W1601)\n\n*apply built-in referenced* Used when the apply built-in function is\nreferenced (missing from Python 3)"},{"id":"PyLint_W1602","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"basestring-builtin (W1602)","description":"basestring built-in referenced. Used when the basestring built-in function is referenced (missing from Python 3)","explanation":"# basestring-builtin (W1602)\n\n*basestring built-in referenced* Used when the basestring built-in\nfunction is referenced (missing from Python 3)"},{"id":"PyLint_W1603","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"buffer-builtin (W1603)","description":"buffer built-in referenced. Used when the buffer built-in function is referenced (missing from Python 3)","explanation":"# buffer-builtin (W1603)\n\n*buffer built-in referenced* Used when the buffer built-in function is\nreferenced (missing from Python 3)"},{"id":"PyLint_W1604","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"cmp-builtin (W1604)","description":"cmp built-in referenced. Used when the cmp built-in function is referenced (missing from Python 3)","explanation":"# cmp-builtin (W1604)\n\n*cmp built-in referenced* Used when the cmp built-in function is\nreferenced (missing from Python 3)"},{"id":"PyLint_W1605","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"coerce-builtin (W1605)","description":"coerce built-in referenced. Used when the coerce built-in function is referenced (missing from Python 3)","explanation":"# coerce-builtin (W1605)\n\n*coerce built-in referenced* Used when the coerce built-in function is\nreferenced (missing from Python 3)"},{"id":"PyLint_W1606","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"execfile-builtin (W1606)","description":"execfile built-in referenced. Used when the execfile built-in function is referenced (missing from Python 3)","explanation":"# execfile-builtin (W1606)\n\n*execfile built-in referenced* Used when the execfile built-in function\nis referenced (missing from Python 3)"},{"id":"PyLint_W1607","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"file-builtin (W1607)","description":"file built-in referenced. Used when the file built-in function is referenced (missing from Python 3)","explanation":"# file-builtin (W1607)\n\n*file built-in referenced* Used when the file built-in function is\nreferenced (missing from Python 3)"},{"id":"PyLint_W1608","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"long-builtin (W1608)","description":"long built-in referenced. Used when the long built-in function is referenced (missing from Python 3)","explanation":"# long-builtin (W1608)\n\n*long built-in referenced* Used when the long built-in function is\nreferenced (missing from Python 3)"},{"id":"PyLint_W1609","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"raw_input-builtin (W1609)","description":"raw_input built-in referenced. Used when the raw_input built-in function is referenced (missing from Python 3)","explanation":"# raw_input-builtin (W1609)\n\n*raw\\_input built-in referenced* Used when the raw\\_input built-in\nfunction is referenced (missing from Python 3)"},{"id":"PyLint_W1610","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"reduce-builtin (W1610)","description":"reduce built-in referenced. Used when the reduce built-in function is referenced (missing from Python 3)","explanation":"# reduce-builtin (W1610)\n\n*reduce built-in referenced* Used when the reduce built-in function is\nreferenced (missing from Python 3)"},{"id":"PyLint_W1611","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"standarderror-builtin (W1611)","description":"StandardError built-in referenced. Used when the StandardError built-in function is referenced (missing from Python 3)","explanation":"# standarderror-builtin (W1611)\n\n*StandardError built-in referenced* Used when the StandardError built-in\nfunction is referenced (missing from Python 3)"},{"id":"PyLint_W1612","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"unicode-builtin (W1612)","description":"unicode built-in referenced. Used when the unicode built-in function is referenced (missing from Python 3)","explanation":"# unicode-builtin (W1612)\n\n*unicode built-in referenced* Used when the unicode built-in function is\nreferenced (missing from Python 3)"},{"id":"PyLint_W1613","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"xrange-builtin (W1613)","description":"xrange built-in referenced. Used when the xrange built-in function is referenced (missing from Python 3)","explanation":"# xrange-builtin (W1613)\n\n*xrange built-in referenced* Used when the xrange built-in function is\nreferenced (missing from Python 3)"},{"id":"PyLint_W1614","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"coerce-method (W1614)","description":"__coerce__ method defined. Used when a __coerce__ method is defined (method is not used by Python 3)","explanation":"# coerce-method (W1614)\n\n*\\_\\_coerce\\_\\_ method defined* Used when a \\_\\_coerce\\_\\_ method is\ndefined (method is not used by Python 3)"},{"id":"PyLint_W1615","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"delslice-method (W1615)","description":"__delslice__ method defined. Used when a __delslice__ method is defined (method is not used by Python 3)","explanation":"# delslice-method (W1615)\n\n*\\_\\_delslice\\_\\_ method defined* Used when a \\_\\_delslice\\_\\_ method is\ndefined (method is not used by Python 3)"},{"id":"PyLint_W1616","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"getslice-method (W1616)","description":"__getslice__ method defined. Used when a __getslice__ method is defined (method is not used by Python 3)","explanation":"# getslice-method (W1616)\n\n*\\_\\_getslice\\_\\_ method defined* Used when a \\_\\_getslice\\_\\_ method is\ndefined (method is not used by Python 3)"},{"id":"PyLint_W1617","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"setslice-method (W1617)","description":"__setslice__ method defined. Used when a __setslice__ method is defined (method is not used by Python 3)","explanation":"# setslice-method (W1617)\n\n*\\_\\_setslice\\_\\_ method defined* Used when a \\_\\_setslice\\_\\_ method is\ndefined (method is not used by Python 3)"},{"id":"PyLint_W1618","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"no-absolute-import (W1618)","description":"import missing `from __future__ import absolute_import`. Used when an import is not accompanied by from __future__ import absolute_import (default behaviour in Python 3)","explanation":"# no-absolute-import (W1618)\n\n*import missing \\`from \\_\\_future\\_\\_ import absolute\\_import\\`* Used\nwhen an import is not accompanied by `from __future__ import\nabsolute_import` (default behaviour in Python 3)"},{"id":"PyLint_W1619","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"old-division (W1619)","description":"division w/o __future__ statement. Used for non-floor division w/o a float literal or from __future__ import division (Python 3 returns a float for int division unconditionally)","explanation":"# old-division (W1619)\n\n*division w/o \\_\\_future\\_\\_ statement* Used for non-floor division w/o\na float literal or `from __future__ import division` (Python 3 returns a\nfloat for int division unconditionally)"},{"id":"PyLint_W1620","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"dict-iter-method (W1620)","description":"Calling a dict.iter*() method. Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks these methods)","explanation":"# dict-iter-method (W1620)\n\n*Calling a dict.iter\\*() method* Used for calls to dict.iterkeys(),\nitervalues() or iteritems() (Python 3 lacks these methods)"},{"id":"PyLint_W1621","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"dict-view-method (W1621)","description":"Calling a dict.view*() method. Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks these methods)","explanation":"# dict-view-method (W1621)\n\n*Calling a dict.view\\*() method* Used for calls to dict.viewkeys(),\nviewvalues() or viewitems() (Python 3 lacks these methods)"},{"id":"PyLint_W1622","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"next-method-called (W1622)","description":"Called a next() method on an object. Used when an object’s next() method is called (Python 3 uses the next() built- in function)","explanation":"# next-method-called (W1622)\n\n*Called a next() method on an object* Used when an object’s next()\nmethod is called (Python 3 uses the next() built- in function)"},{"id":"PyLint_W1623","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"metaclass-assignment (W1623)","description":"Assigning to a class’s __metaclass__ attribute. Used when a metaclass is specified by assigning to __metaclass__ (Python 3 specifies the metaclass as a class statement argument)","explanation":"# metaclass-assignment (W1623)\n\n*Assigning to a class’s \\_\\_metaclass\\_\\_ attribute* Used when a\nmetaclass is specified by assigning to \\_\\_metaclass\\_\\_ (Python 3\nspecifies the metaclass as a class statement argument)"},{"id":"PyLint_W1624","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"indexing-exception (W1624)","description":"Indexing exceptions will not work on Python 3. Indexing exceptions will not work on Python 3. Use exception.args[index] instead.","explanation":"# indexing-exception (W1624)\n\n*Indexing exceptions will not work on Python 3* Indexing exceptions will\nnot work on Python 3. Use exception.args\\[index\\] instead."},{"id":"PyLint_W1625","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"raising-string (W1625)","description":"Raising a string exception. Used when a string exception is raised. This will not work on Python 3.","explanation":"# raising-string (W1625)\n\n*Raising a string exception* Used when a string exception is raised.\nThis will not work on Python 3."},{"id":"PyLint_W1626","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"reload-builtin (W1626)","description":"reload built-in referenced. Used when the reload built-in function is referenced (missing from Python 3). You can use instead imp.reload or importlib.reload.","explanation":"# reload-builtin (W1626)\n\n*reload built-in referenced* Used when the reload built-in function is\nreferenced (missing from Python 3). You can use instead imp.reload or\nimportlib.reload."},{"id":"PyLint_W1627","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"oct-method (W1627)","description":"__oct__ method defined. Used when an __oct__ method is defined (method is not used by Python 3)","explanation":"# oct-method (W1627)\n\n*\\_\\_oct\\_\\_ method defined* Used when an \\_\\_oct\\_\\_ method is defined\n(method is not used by Python 3)"},{"id":"PyLint_W1628","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"hex-method (W1628)","description":"__hex__ method defined. Used when a __hex__ method is defined (method is not used by Python 3)","explanation":"# hex-method (W1628)\n\n*\\_\\_hex\\_\\_ method defined* Used when a \\_\\_hex\\_\\_ method is defined\n(method is not used by Python 3)"},{"id":"PyLint_W1629","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"nonzero-method (W1629)","description":"__nonzero__ method defined. Used when a __nonzero__ method is defined (method is not used by Python 3)","explanation":"# nonzero-method (W1629)\n\n*\\_\\_nonzero\\_\\_ method defined* Used when a \\_\\_nonzero\\_\\_ method is\ndefined (method is not used by Python 3)"},{"id":"PyLint_W1630","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"cmp-method (W1630)","description":"__cmp__ method defined. Used when a __cmp__ method is defined (method is not used by Python 3)","explanation":"# cmp-method (W1630)\n\n*\\_\\_cmp\\_\\_ method defined* Used when a \\_\\_cmp\\_\\_ method is defined\n(method is not used by Python 3)"},{"id":"PyLint_W1632","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"input-builtin (W1632)","description":"input built-in referenced. Used when the input built-in is referenced (backwards-incompatible semantics in Python 3)","explanation":"# input-builtin (W1632)\n\n*input built-in referenced* Used when the input built-in is referenced\n(backwards-incompatible semantics in Python 3)"},{"id":"PyLint_W1633","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"round-builtin (W1633)","description":"round built-in referenced. Used when the round built-in is referenced (backwards-incompatible semantics in Python 3)","explanation":"# round-builtin (W1633)\n\n*round built-in referenced* Used when the round built-in is referenced\n(backwards-incompatible semantics in Python 3)"},{"id":"PyLint_W1634","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"intern-builtin (W1634)","description":"intern built-in referenced. Used when the intern built-in is referenced (Moved to sys.intern in Python 3)","explanation":"# intern-builtin (W1634)\n\n*intern built-in referenced* Used when the intern built-in is referenced\n(Moved to sys.intern in Python 3)"},{"id":"PyLint_W1635","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"unichr-builtin (W1635)","description":"unichr built-in referenced. Used when the unichr built-in is referenced (Use chr in Python 3)","explanation":"# unichr-builtin (W1635)\n\n*unichr built-in referenced* Used when the unichr built-in is referenced\n(Use chr in Python 3)"},{"id":"PyLint_W1636","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"map-builtin-not-iterating (W1636)","description":"map built-in referenced when not iterating. Used when the map built-in is referenced in a non-iterating context (returns an iterator in Python 3)","explanation":"# map-builtin-not-iterating (W1636)\n\n*map built-in referenced when not iterating* Used when the map built-in\nis referenced in a non-iterating context (returns an iterator in Python\n3)"},{"id":"PyLint_W1637","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"zip-builtin-not-iterating (W1637)","description":"zip built-in referenced when not iterating. Used when the zip built-in is referenced in a non-iterating context (returns an iterator in Python 3)","explanation":"# zip-builtin-not-iterating (W1637)\n\n*zip built-in referenced when not iterating* Used when the zip built-in\nis referenced in a non-iterating context (returns an iterator in Python\n3)"},{"id":"PyLint_W1638","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"range-builtin-not-iterating (W1638)","description":"range built-in referenced when not iterating. Used when the range built-in is referenced in a non-iterating context (returns an iterator in Python 3)","explanation":"# range-builtin-not-iterating (W1638)\n\n*range built-in referenced when not iterating* Used when the range\nbuilt-in is referenced in a non-iterating context (returns an iterator\nin Python 3)"},{"id":"PyLint_W1639","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"filter-builtin-not-iterating (W1639)","description":"filter built-in referenced when not iterating. Used when the filter built-in is referenced in a non-iterating context (returns an iterator in Python 3)","explanation":"# filter-builtin-not-iterating (W1639)\n\n*filter built-in referenced when not iterating* Used when the filter\nbuilt-in is referenced in a non-iterating context (returns an iterator\nin Python 3)"},{"id":"PyLint_W1640","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"using-cmp-argument (W1640)","description":"Using the cmp argument for list.sort / sorted. Using the cmp argument for list.sort or the sorted builtin should be avoided, since it was removed in Python 3. Using either key or functools.cmp_to_key should be preferred.","explanation":"# using-cmp-argument (W1640)\n\n*Using the cmp argument for list.sort / sorted* Using the cmp argument\nfor list.sort or the sorted builtin should be avoided, since it was\nremoved in Python 3. Using either key or functools.cmp\\_to\\_key should\nbe preferred."},{"id":"PyLint_W1641","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"eq-without-hash (W1641)","description":"Implementing __eq__ without also implementing __hash__. Used when a class implements __eq__ but not __hash__. In Python 2, objects get object.__hash__ as the default implementation, in Python 3 objects get None as their default __hash__ implementation if they also implement __eq__.","explanation":"# eq-without-hash (W1641)\n\n*Implementing \\_\\_eq\\_\\_ without also implementing \\_\\_hash\\_\\_* Used\nwhen a class implements \\_\\_eq\\_\\_ but not \\_\\_hash\\_\\_. In Python 2,\nobjects get object.\\_\\_hash\\_\\_ as the default implementation, in Python\n3 objects get None as their default \\_\\_hash\\_\\_ implementation if they\nalso implement \\_\\_eq\\_\\_."},{"id":"PyLint_W1642","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"div-method (W1642)","description":"__div__ method defined. Used when a __div__ method is defined. Using __truediv__ and setting__div__ = __truediv__ should be preferred.(method is not used by Python 3)","explanation":"# div-method (W1642)\n\n*\\_\\_div\\_\\_ method defined* Used when a \\_\\_div\\_\\_ method is defined.\nUsing \\_\\_truediv\\_\\_ and setting\\_\\_div\\_\\_ = \\_\\_truediv\\_\\_ should be\npreferred.(method is not used by Python 3)"},{"id":"PyLint_W1643","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"idiv-method (W1643)","description":"__idiv__ method defined. Used when an __idiv__ method is defined. Using __itruediv__ and setting__idiv__ = __itruediv__ should be preferred.(method is not used by Python 3)","explanation":"# idiv-method (W1643)\n\n*\\_\\_idiv\\_\\_ method defined* Used when an \\_\\_idiv\\_\\_ method is\ndefined. Using \\_\\_itruediv\\_\\_ and setting\\_\\_idiv\\_\\_ =\n\\_\\_itruediv\\_\\_ should be preferred.(method is not used by Python 3)"},{"id":"PyLint_W1644","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"rdiv-method (W1644)","description":"__rdiv__ method defined. Used when a __rdiv__ method is defined. Using __rtruediv__ and setting__rdiv__ = __rtruediv__ should be preferred.(method is not used by Python 3)","explanation":"# rdiv-method (W1644)\n\n*\\_\\_rdiv\\_\\_ method defined* Used when a \\_\\_rdiv\\_\\_ method is\ndefined. Using \\_\\_rtruediv\\_\\_ and setting\\_\\_rdiv\\_\\_ =\n\\_\\_rtruediv\\_\\_ should be preferred.(method is not used by Python 3)"},{"id":"PyLint_W1645","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"exception-message-attribute (W1645)","description":"Exception.message removed in Python 3. Used when the message attribute is accessed on an Exception. Use str(exception) instead.","explanation":"# exception-message-attribute (W1645)\n\n*Exception.message removed in Python 3* Used when the message attribute\nis accessed on an Exception. Use str(exception) instead."},{"id":"PyLint_W1646","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"invalid-str-codec (W1646)","description":"non-text encoding used in str.decode. Used when using str.encode or str.decode with a non-text encoding. Use codecs module to handle arbitrary codecs.","explanation":"# invalid-str-codec (W1646)\n\n*non-text encoding used in str.decode* Used when using str.encode or\nstr.decode with a non-text encoding. Use codecs module to handle\narbitrary codecs."},{"id":"PyLint_W1647","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"sys-max-int (W1647)","description":"sys.maxint removed in Python 3. Used when accessing sys.maxint. Use sys.maxsize instead.","explanation":"# sys-max-int (W1647)\n\n*sys.maxint removed in Python 3* Used when accessing sys.maxint. Use\nsys.maxsize instead."},{"id":"PyLint_W1648","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"bad-python3-import (W1648)","description":"Module moved in Python 3. Used when importing a module that no longer exists in Python 3.","explanation":"# bad-python3-import (W1648)\n\n*Module moved in Python 3* Used when importing a module that no longer\nexists in Python 3."},{"id":"PyLint_W1649","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"deprecated-string-function (W1649)","description":"Accessing a deprecated function on the string module. Used when accessing a string function that has been deprecated in Python 3.","explanation":"# deprecated-string-function (W1649)\n\n*Accessing a deprecated function on the string module* Used when\naccessing a string function that has been deprecated in Python 3."},{"id":"PyLint_W1650","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"deprecated-str-translate-call (W1650)","description":"Using str.translate with deprecated deletechars parameters. Used when using the deprecated deletechars parameters from str.translate. Use re.sub to remove the desired characters","explanation":"# deprecated-str-translate-call (W1650)\n\n*Using str.translate with deprecated deletechars parameters* Used when\nusing the deprecated deletechars parameters from str.translate. Use\nre.sub to remove the desired characters"},{"id":"PyLint_W1651","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"deprecated-itertools-function (W1651)","description":"Accessing a deprecated function on the itertools module. Used when accessing a function on itertools that has been removed in Python 3.","explanation":"# deprecated-itertools-function (W1651)\n\n*Accessing a deprecated function on the itertools module* Used when\naccessing a function on itertools that has been removed in Python 3."},{"id":"PyLint_W1652","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"deprecated-types-field (W1652)","description":"Accessing a deprecated fields on the types module. Used when accessing a field on types that has been removed in Python 3.","explanation":"# deprecated-types-field (W1652)\n\n*Accessing a deprecated fields on the types module* Used when accessing\na field on types that has been removed in Python 3."},{"id":"PyLint_W1653","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"next-method-defined (W1653)","description":"next method defined. Used when a next method is defined that would be an iterator in Python 2 but is treated as a normal function in Python 3.","explanation":"# next-method-defined (W1653)\n\n*next method defined* Used when a next method is defined that would be\nan iterator in Python 2 but is treated as a normal function in Python 3."},{"id":"PyLint_W1654","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"dict-items-not-iterating (W1654)","description":"dict.items referenced when not iterating. Used when dict.items is referenced in a non-iterating context (returns an iterator in Python 3)","explanation":"# dict-items-not-iterating (W1654)\n\n*dict.items referenced when not iterating* Used when dict.items is\nreferenced in a non-iterating context (returns an iterator in Python 3)"},{"id":"PyLint_W1655","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"dict-keys-not-iterating (W1655)","description":"dict.keys referenced when not iterating. Used when dict.keys is referenced in a non-iterating context (returns an iterator in Python 3)","explanation":"# dict-keys-not-iterating (W1655)\n\n*dict.keys referenced when not iterating* Used when dict.keys is\nreferenced in a non-iterating context (returns an iterator in Python 3)"},{"id":"PyLint_W1656","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"dict-values-not-iterating (W1656)","description":"dict.values referenced when not iterating. Used when dict.values is referenced in a non-iterating context (returns an iterator in Python 3)","explanation":"# dict-values-not-iterating (W1656)\n\n*dict.values referenced when not iterating* Used when dict.values is\nreferenced in a non-iterating context (returns an iterator in Python 3)"},{"id":"PyLint_W1657","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"deprecated-operator-function (W1657)","description":"Accessing a removed attribute on the operator module. Used when accessing a field on operator module that has been removed in Python 3.","explanation":"# deprecated-operator-function (W1657)\n\n*Accessing a removed attribute on the operator module* Used when\naccessing a field on operator module that has been removed in Python 3."},{"id":"PyLint_W1658","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"deprecated-urllib-function (W1658)","description":"Accessing a removed attribute on the urllib module. Used when accessing a field on urllib module that has been removed or moved in Python 3.","explanation":"# deprecated-urllib-function (W1658)\n\n*Accessing a removed attribute on the urllib module* Used when accessing\na field on urllib module that has been removed or moved in Python 3."},{"id":"PyLint_W1659","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"xreadlines-attribute (W1659)","description":"Accessing a removed xreadlines attribute. Used when accessing the xreadlines() function on a file stream, removed in Python 3.","explanation":"# xreadlines-attribute (W1659)\n\n*Accessing a removed xreadlines attribute* Used when accessing the\nxreadlines() function on a file stream, removed in Python 3."},{"id":"PyLint_W1660","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"deprecated-sys-function (W1660)","description":"Accessing a removed attribute on the sys module. Used when accessing a field on sys module that has been removed in Python 3.","explanation":"# deprecated-sys-function (W1660)\n\n*Accessing a removed attribute on the sys module* Used when accessing a\nfield on sys module that has been removed in Python 3."},{"id":"PyLint_W1661","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"exception-escape (W1661)","description":"Using an exception object that was bound by an except handler. Emitted when using an exception, that was bound in an except handler, outside of the except handler. On Python 3 these exceptions will be deleted once they get out of the except handler.","explanation":"# exception-escape (W1661)\n\n*Using an exception object that was bound by an except handler* Emitted\nwhen using an exception, that was bound in an except handler, outside of\nthe except handler. On Python 3 these exceptions will be deleted once\nthey get out of the except handler."},{"id":"PyLint_W1662","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"comprehension-escape (W1662)","description":"Using a variable that was bound inside a comprehension. Emitted when using a variable, that was bound in a comprehension handler, outside of the comprehension itself. On Python 3 these variables will be deleted outside of the comprehension.","explanation":"# comprehension-escape (W1662)\n\n*Using a variable that was bound inside a comprehension* Emitted when\nusing a variable, that was bound in a comprehension handler, outside of\nthe comprehension itself. On Python 3 these variables will be deleted\noutside of the comprehension."}],"pagination":{"limit":100,"total":298}}
