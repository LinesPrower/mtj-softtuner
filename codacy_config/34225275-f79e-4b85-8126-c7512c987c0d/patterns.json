{"data":[{"id":"PyLint_C0102","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[{"name":"bad-names","default":"foo,bar,baz,toto,tutu,tata","description":"Bad variable names which should always be refused, separated by a comma."}],"title":"blacklisted-name (C0102)","description":"Black listed name “%s”. Used when the name is listed in the black list (unauthorized names).","explanation":"# blacklisted-name (C0102)\n\n*Black listed name “%s”* Used when the name is listed in the black list\n(unauthorized names)."},{"id":"PyLint_C0103","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[{"name":"argument-rgx","default":"[a-z_][a-z0-9_]{2,30}$","description":"Regular expression matching correct argument names. Overrides argument- naming-style."},{"name":"function-rgx","default":"[a-z_][a-z0-9_]{2,30}$","description":"Regular expression matching correct function names."},{"name":"const-rgx","default":"(([A-Z_][A-Z0-9_]*)|(__.*__))$","description":"Regular expression matching correct constant names."},{"name":"class-rgx","default":"[A-Z_][a-zA-Z0-9]+$","description":"Regular expression matching correct class names."},{"name":"method-rgx","default":"[a-z_][a-z0-9_]{2,30}$","description":"Regular expression matching correct method names."},{"name":"class-attribute-rgx","default":"([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$","description":"Regular expression matching correct class attribute names."},{"name":"inlinevar-rgx","default":"[A-Za-z_][A-Za-z0-9_]*$","description":"Regular expression matching correct inline iteration names."},{"name":"module-rgx","default":"(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$","description":"Regular expression matching correct module names."},{"name":"attr-rgx","default":"[a-z_][a-z0-9_]{2,30}$","description":"Regular expression matching correct attribute names."},{"name":"variable-rgx","default":"[a-z_][a-z0-9_]{2,30}$","description":"Regular expression matching correct variable names."}],"title":"invalid-name (C0103)","description":"%s name “%s” doesn’t conform to %s. Used when the name doesn’t conform to naming rules associated to its type (constant, variable, class…).","explanation":"# invalid-name (C0103)\n\n*%s name “%s” doesn’t conform to %s* Used when the name doesn’t conform\nto naming rules associated to its type (constant, variable, class…)."},{"id":"PyLint_C0111","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"missing-docstring (C0111)","description":"Missing %s docstring. Used when a module, function, class or method has no docstring.Some special methods like __init__ doesn’t necessary require a docstring.","explanation":"# missing-docstring (C0111)\n\n*Missing %s docstring* Used when a module, function, class or method has\nno docstring.Some special methods like \\_\\_init\\_\\_ doesn’t necessary\nrequire a docstring."},{"id":"PyLint_C0112","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"empty-docstring (C0112)","description":"Empty %s docstring. Used when a module, function, class or method has an empty docstring (it would be too easy ;).","explanation":"# empty-docstring (C0112)\n\n*Empty %s docstring* Used when a module, function, class or method has\nan empty docstring (it would be too easy ;)."},{"id":"PyLint_C0113","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"unneeded-not (C0113)","description":"Consider changing “%s” to “%s”. Used when a boolean expression contains an unneeded negation.","explanation":"# unneeded-not (C0113)\n\n*Consider changing “%s” to “%s”* Used when a boolean expression contains\nan unneeded negation."},{"id":"PyLint_C0121","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"singleton-comparison (C0121)","description":"Comparison to %s should be %s. Used when an expression is compared to singleton values like True, False or None.","explanation":"# singleton-comparison (C0121)\n\n*Comparison to %s should be %s* Used when an expression is compared to\nsingleton values like True, False or None."},{"id":"PyLint_C0122","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"misplaced-comparison-constant (C0122)","description":"Comparison should be %s. Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.","explanation":"# misplaced-comparison-constant (C0122)\n\n*Comparison should be %s* Used when the constant is placed on the left\nside of a comparison. It is usually clearer in intent to place it in the\nright hand side of the comparison."},{"id":"PyLint_C0123","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":true,"parameters":[],"title":"unidiomatic-typecheck (C0123)","description":"Using type() instead of isinstance() for a typecheck. The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.","explanation":"# unidiomatic-typecheck (C0123)\n\n*Using type() instead of isinstance() for a typecheck.* The idiomatic\nway to perform an explicit typecheck in Python is to use isinstance(x,\nY) rather than type(x) == Y, type(x) is Y. Though there are unusual\nsituations where these give different results."},{"id":"PyLint_C0200","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":true,"parameters":[],"title":"consider-using-enumerate (C0200)","description":"Consider using enumerate instead of iterating with range and len. Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.","explanation":"# consider-using-enumerate (C0200)\n\n*Consider using enumerate instead of iterating with range and len*\nEmitted when code that iterates with range and len is encountered. Such\ncode can be simplified by using the enumerate builtin."},{"id":"PyLint_C0201","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"consider-iterating-dictionary (C0201)","description":"Consider iterating the dictionary directly instead of calling .keys(). Emitted when the keys of a dictionary are iterated through the .keys() method. It is enough to just iterate through the dictionary itself, as in “for key in dictionary”.","explanation":"# consider-iterating-dictionary (C0201)\n\n*Consider iterating the dictionary directly instead of calling .keys()*\nEmitted when the keys of a dictionary are iterated through the .keys()\nmethod. It is enough to just iterate through the dictionary itself, as\nin “for key in dictionary”."},{"id":"PyLint_C0202","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"bad-classmethod-argument (C0202)","description":"Class method %s should have %s as first argument. Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to “cls”), recommended to easily differentiate them from regular instance methods.","explanation":"# bad-classmethod-argument (C0202)\n\n*Class method %s should have %s as first argument* Used when a class\nmethod has a first argument named differently than the value specified\nin valid-classmethod-first-arg option (default to “cls”), recommended to\neasily differentiate them from regular instance methods."},{"id":"PyLint_C0203","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"bad-mcs-method-argument (C0203)","description":"Metaclass method %s should have %s as first argument. Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to “cls”), recommended to easily differentiate them from regular instance methods.","explanation":"# bad-mcs-method-argument (C0203)\n\n*Metaclass method %s should have %s as first argument* Used when a\nmetaclass method has a first argument named differently than the value\nspecified in valid-classmethod-first-arg option (default to “cls”),\nrecommended to easily differentiate them from regular instance methods."},{"id":"PyLint_C0204","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"bad-mcs-classmethod-argument (C0204)","description":"Metaclass class method %s should have %s as first argument. Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to “mcs”), recommended to easily differentiate them from regular instance methods.","explanation":"# bad-mcs-classmethod-argument (C0204)\n\n*Metaclass class method %s should have %s as first argument* Used when a\nmetaclass class method has a first argument named differently than the\nvalue specified in valid-metaclass-classmethod-first-arg option (default\nto “mcs”), recommended to easily differentiate them from regular\ninstance methods."},{"id":"PyLint_C0205","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"single-string-used-for-slots (C0205)","description":"Class __slots__ should be a non-string iterable. Used when a class __slots__ is a simple string, rather than an iterable.","explanation":"# single-string-used-for-slots (C0205)\n\n*Class \\_\\_slots\\_\\_ should be a non-string iterable* Used when a class\n\\_\\_slots\\_\\_ is a simple string, rather than an iterable."},{"id":"PyLint_C0301","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[{"name":"max-line-length","default":"120","description":"Maximum number of characters on a single line."}],"title":"line-too-long (C0301)","description":"Line too long (%s/%s). Used when a line is longer than a given number of characters.","explanation":"# line-too-long (C0301)\n\n*Line too long (%s/%s)* Used when a line is longer than a given number\nof characters."},{"id":"PyLint_C0302","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-many-lines (C0302)","description":"Too many lines in module (%s/%s). Used when a module has too much lines, reducing its readability.","explanation":"# too-many-lines (C0302)\n\n*Too many lines in module (%s/%s)* Used when a module has too much\nlines, reducing its readability."},{"id":"PyLint_C0303","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":true,"parameters":[],"title":"trailing-whitespace (C0303)","description":"Trailing whitespace. Used when there is whitespace between the end of a line and the newline.","explanation":"# trailing-whitespace (C0303)\n\n*Trailing whitespace* Used when there is whitespace between the end of a\nline and the newline."},{"id":"PyLint_C0304","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"missing-final-newline (C0304)","description":"Final newline missing. Used when the last line in a file is missing a newline.","explanation":"# missing-final-newline (C0304)\n\n*Final newline missing* Used when the last line in a file is missing a\nnewline."},{"id":"PyLint_C0305","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"trailing-newlines (C0305)","description":"Trailing newlines. Used when there are trailing blank lines in a file.","explanation":"# trailing-newlines (C0305)\n\n*Trailing newlines* Used when there are trailing blank lines in a file."},{"id":"PyLint_C0321","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"multiple-statements (C0321)","description":"More than one statement on a single line. Used when more than on statement are found on the same line.","explanation":"# multiple-statements (C0321)\n\n*More than one statement on a single line* Used when more than on\nstatement are found on the same line."},{"id":"PyLint_C0325","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"superfluous-parens (C0325)","description":"Unnecessary parens after %r keyword. Used when a single item in parentheses follows an if, for, or other keyword.","explanation":"# superfluous-parens (C0325)\n\n*Unnecessary parens after %r keyword* Used when a single item in\nparentheses follows an if, for, or other keyword."},{"id":"PyLint_C0326","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"bad-whitespace (C0326)","description":"%s space %s %s %s. Used when a wrong number of spaces is used around an operator, bracket or block opener.","explanation":"# bad-whitespace (C0326)\n\n*%s space %s %s %s* Used when a wrong number of spaces is used around an\noperator, bracket or block opener."},{"id":"PyLint_C0327","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"mixed-line-endings (C0327)","description":"Mixed line endings LF and CRLF. Used when there are mixed (LF and CRLF) newline signs in a file.","explanation":"# mixed-line-endings (C0327)\n\n*Mixed line endings LF and CRLF* Used when there are mixed (LF and CRLF)\nnewline signs in a file."},{"id":"PyLint_C0328","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"unexpected-line-ending-format (C0328)","description":"Unexpected line ending format. There is ‘%s’ while it should be ‘%s’. Used when there is different newline than expected.","explanation":"# unexpected-line-ending-format (C0328)\n\n*Unexpected line ending format. There is ‘%s’ while it should be ‘%s’.*\nUsed when there is different newline than expected."},{"id":"PyLint_C0330","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"bad-continuation (C0330)","description":"Wrong %s indentation%s%s. TODO","explanation":"# bad-continuation (C0330)\n\n*Wrong %s indentation%s%s.* TODO"},{"id":"PyLint_C0401","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"wrong-spelling-in-comment (C0401)","description":"Wrong spelling of a word ‘%s’ in a comment:. Used when a word in comment is not spelled correctly.","explanation":"# wrong-spelling-in-comment (C0401)\n\n*Wrong spelling of a word ‘%s’ in a comment:* Used when a word in\ncomment is not spelled correctly."},{"id":"PyLint_C0402","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"wrong-spelling-in-docstring (C0402)","description":"Wrong spelling of a word ‘%s’ in a docstring:. Used when a word in docstring is not spelled correctly.","explanation":"# wrong-spelling-in-docstring (C0402)\n\n*Wrong spelling of a word ‘%s’ in a docstring:* Used when a word in\ndocstring is not spelled correctly."},{"id":"PyLint_C0403","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"invalid-characters-in-docstring (C0403)","description":"Invalid characters %r in a docstring. Used when a word in docstring cannot be checked by enchant.","explanation":"# invalid-characters-in-docstring (C0403)\n\n*Invalid characters %r in a docstring* Used when a word in docstring\ncannot be checked by enchant."},{"id":"PyLint_C0410","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"multiple-imports (C0410)","description":"Multiple imports on one line (%s). Used when import statement importing multiple modules is detected.","explanation":"# multiple-imports (C0410)\n\n*Multiple imports on one line (%s)* Used when import statement importing\nmultiple modules is detected."},{"id":"PyLint_C0411","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"wrong-import-order (C0411)","description":"%s should be placed before %s. Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports)","explanation":"# wrong-import-order (C0411)\n\n*%s should be placed before %s* Used when PEP8 import order is not\nrespected (standard imports first, then third-party libraries, then\nlocal imports)"},{"id":"PyLint_C0412","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"ungrouped-imports (C0412)","description":"Imports from package %s are not grouped. Used when imports are not grouped by packages","explanation":"# ungrouped-imports (C0412)\n\n*Imports from package %s are not grouped* Used when imports are not\ngrouped by packages"},{"id":"PyLint_C0413","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"wrong-import-position (C0413)","description":"Import “%s” should be placed at the top of the module. Used when code and imports are mixed","explanation":"# wrong-import-position (C0413)\n\n*Import “%s” should be placed at the top of the module* Used when code\nand imports are mixed"},{"id":"PyLint_C1001","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":true,"parameters":[],"title":"old-style-class (C1001)","description":"Old-style class defined. Used when a class is defined that does not inherit from another class and does not inherit explicitly from “object”. This message can’t be emitted when using Python >= 3.0.","explanation":"# old-style-class (C1001)\n\n*Old-style class defined.* Used when a class is defined that does not\ninherit from another class and does not inherit explicitly from\n“object”. This message can’t be emitted when using Python \\>= 3.0."},{"id":"PyLint_C1801","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"len-as-condition (C1801)","description":"Do not use `len(SEQUENCE)` to determine if a sequence is empty. Used when Pylint detects that len(sequence) is being used inside a condition to determine if a sequence is empty. Instead of comparing the length to 0, rely on the fact that empty sequences are false.","explanation":"# len-as-condition (C1801)\n\n*Do not use \\`len(SEQUENCE)\\` to determine if a sequence is empty* Used\nwhen Pylint detects that len(sequence) is being used inside a condition\nto determine if a sequence is empty. Instead of comparing the length to\n0, rely on the fact that empty sequences are false."},{"id":"PyLint_E0100","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"init-is-generator (E0100)","description":"__init__ method is a generator. Used when the special class method __init__ is turned into a generator by a yield in its body.","explanation":"# init-is-generator (E0100)\n\n*\\_\\_init\\_\\_ method is a generator* Used when the special class method\n\\_\\_init\\_\\_ is turned into a generator by a yield in its body."},{"id":"PyLint_E0101","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"return-in-init (E0101)","description":"Explicit return in __init__. Used when the special class method __init__ has an explicit return value.","explanation":"# return-in-init (E0101)\n\n*Explicit return in \\_\\_init\\_\\_* Used when the special class method\n\\_\\_init\\_\\_ has an explicit return value."},{"id":"PyLint_E0102","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"function-redefined (E0102)","description":"%s already defined line %s. Used when a function / class / method is redefined.","explanation":"# function-redefined (E0102)\n\n*%s already defined line %s* Used when a function / class / method is\nredefined."},{"id":"PyLint_E0103","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"not-in-loop (E0103)","description":"%r not properly in loop. Used when break or continue keywords are used outside a loop.","explanation":"# not-in-loop (E0103)\n\n*%r not properly in loop* Used when break or continue keywords are used\noutside a loop."},{"id":"PyLint_E0104","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"return-outside-function (E0104)","description":"Return outside function. Used when a “return” statement is found outside a function or method.","explanation":"# return-outside-function (E0104)\n\n*Return outside function* Used when a “return” statement is found\noutside a function or method."},{"id":"PyLint_E0105","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"yield-outside-function (E0105)","description":"Yield outside function. Used when a “yield” statement is found outside a function or method.","explanation":"# yield-outside-function (E0105)\n\n*Yield outside function* Used when a “yield” statement is found outside\na function or method."},{"id":"PyLint_E0106","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"return-arg-in-generator (E0106)","description":"Return with argument inside generator. Used when a “return” statement with an argument is found outside in a generator function or method (e.g. with some “yield” statements). This message can’t be emitted when using Python >= 3.3.","explanation":"# return-arg-in-generator (E0106)\n\n*Return with argument inside generator* Used when a “return” statement\nwith an argument is found outside in a generator function or method\n(e.g. with some “yield” statements). This message can’t be emitted when\nusing Python \\>= 3.3."},{"id":"PyLint_E0107","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"nonexistent-operator (E0107)","description":"Use of the non-existent %s operator. Used when you attempt to use the C-style pre-increment orpre-decrement operator – and ++, which doesn’t exist in Python.","explanation":"# nonexistent-operator (E0107)\n\n*Use of the non-existent %s operator* Used when you attempt to use the\nC-style pre-increment orpre-decrement operator – and ++, which doesn’t\nexist in Python."},{"id":"PyLint_E0108","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"duplicate-argument-name (E0108)","description":"Duplicate argument name %s in function definition. Duplicate argument names in function definitions are syntax errors.","explanation":"# duplicate-argument-name (E0108)\n\n*Duplicate argument name %s in function definition* Duplicate argument\nnames in function definitions are syntax errors."},{"id":"PyLint_E0110","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"abstract-class-instantiated (E0110)","description":"Abstract class %r with abstract methods instantiated. Used when an abstract class with abc.ABCMeta as metaclass has abstract methods and is instantiated.","explanation":"# abstract-class-instantiated (E0110)\n\n*Abstract class %r with abstract methods instantiated* Used when an\nabstract class with abc.ABCMeta as metaclass has abstract methods and is\ninstantiated."},{"id":"PyLint_E0111","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"bad-reversed-sequence (E0111)","description":"The first reversed() argument is not a sequence. Used when the first argument to reversed() builtin isn’t a sequence (does not implement __reversed__, nor __getitem__ and __len__","explanation":"# bad-reversed-sequence (E0111)\n\n*The first reversed() argument is not a sequence* Used when the first\nargument to reversed() builtin isn’t a sequence (does not implement\n\\_\\_reversed\\_\\_, nor \\_\\_getitem\\_\\_ and \\_\\_len\\_\\_"},{"id":"PyLint_E0112","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"too-many-star-expressions (E0112)","description":"More than one starred expression in assignment. Emitted when there are more than one starred expressions (*x) in an assignment. This is a SyntaxError. This message can’t be emitted when using Python < 3.0.","explanation":"# too-many-star-expressions (E0112)\n\n*More than one starred expression in assignment* Emitted when there are\nmore than one starred expressions (\\*x) in an assignment. This is a\nSyntaxError. This message can’t be emitted when using Python \\< 3.0."},{"id":"PyLint_E0113","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"invalid-star-assignment-target (E0113)","description":"Starred assignment target must be in a list or tuple. Emitted when a star expression is used as a starred assignment target. This message can’t be emitted when using Python < 3.0.","explanation":"# invalid-star-assignment-target (E0113)\n\n*Starred assignment target must be in a list or tuple* Emitted when a\nstar expression is used as a starred assignment target. This message\ncan’t be emitted when using Python \\< 3.0."},{"id":"PyLint_E0114","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"star-needs-assignment-target (E0114)","description":"Can use starred expression only in assignment target. Emitted when a star expression is not used in an assignment target. This message can’t be emitted when using Python < 3.0.","explanation":"# star-needs-assignment-target (E0114)\n\n*Can use starred expression only in assignment target* Emitted when a\nstar expression is not used in an assignment target. This message can’t\nbe emitted when using Python \\< 3.0."},{"id":"PyLint_E0115","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"nonlocal-and-global (E0115)","description":"Name %r is nonlocal and global. Emitted when a name is both nonlocal and global. This message can’t be emitted when using Python < 3.0.","explanation":"# nonlocal-and-global (E0115)\n\n*Name %r is nonlocal and global* Emitted when a name is both nonlocal\nand global. This message can’t be emitted when using Python \\< 3.0."},{"id":"PyLint_E0116","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"continue-in-finally (E0116)","description":"‘continue’ not supported inside ‘finally’ clause. Emitted when the continue keyword is found inside a finally clause, which is a SyntaxError.","explanation":"# continue-in-finally (E0116)\n\n*‘continue’ not supported inside ‘finally’ clause* Emitted when the\ncontinue keyword is found inside a finally clause, which is a\nSyntaxError."},{"id":"PyLint_E0117","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"nonlocal-without-binding (E0117)","description":"nonlocal name %s found without binding. Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes This message can’t be emitted when using Python < 3.0.","explanation":"# nonlocal-without-binding (E0117)\n\n*nonlocal name %s found without binding* Emitted when a nonlocal\nvariable does not have an attached name somewhere in the parent scopes\nThis message can’t be emitted when using Python \\< 3.0."},{"id":"PyLint_E0118","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"used-prior-global-declaration (E0118)","description":"Name %r is used prior to global declaration. Emitted when a name is used prior a global declaration, which results in an error since Python 3.6. This message can’t be emitted when using Python < 3.6.","explanation":"# used-prior-global-declaration (E0118)\n\n*Name %r is used prior to global declaration* Emitted when a name is\nused prior a global declaration, which results in an error since Python\n3.6. This message can’t be emitted when using Python \\< 3.6."},{"id":"PyLint_E0202","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"method-hidden (E0202)","description":"An attribute defined in %s line %s hides this method. Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.","explanation":"# method-hidden (E0202)\n\n*An attribute defined in %s line %s hides this method* Used when a class\ndefines a method which is hidden by an instance attribute from an\nancestor class or set by some client code."},{"id":"PyLint_E0203","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"access-member-before-definition (E0203)","description":"Access to member %r before its definition line %s. Used when an instance member is accessed before it’s actually assigned.","explanation":"# access-member-before-definition (E0203)\n\n*Access to member %r before its definition line %s* Used when an\ninstance member is accessed before it’s actually assigned."},{"id":"PyLint_E0211","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"no-method-argument (E0211)","description":"Method has no argument. Used when a method which should have the bound instance as first argument has no argument defined.","explanation":"# no-method-argument (E0211)\n\n*Method has no argument* Used when a method which should have the bound\ninstance as first argument has no argument defined."},{"id":"PyLint_E0213","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"no-self-argument (E0213)","description":"Method should have “self” as first argument. Used when a method has an attribute different the “self” as first argument. This is considered as an error since this is a so common convention that you shouldn’t break it!","explanation":"# no-self-argument (E0213)\n\n*Method should have “self” as first argument* Used when a method has an\nattribute different the “self” as first argument. This is considered as\nan error since this is a so common convention that you shouldn’t break\nit\\!"},{"id":"PyLint_E0236","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"invalid-slots-object (E0236)","description":"Invalid object %r in __slots__, must contain only non empty strings. Used when an invalid (non-string) object occurs in __slots__.","explanation":"# invalid-slots-object (E0236)\n\n*Invalid object %r in \\_\\_slots\\_\\_, must contain only non empty\nstrings* Used when an invalid (non-string) object occurs in\n\\_\\_slots\\_\\_."},{"id":"PyLint_E0237","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"assigning-non-slot (E0237)","description":"Assigning to attribute %r not defined in class slots. Used when assigning to an attribute not defined in the class slots.","explanation":"# assigning-non-slot (E0237)\n\n*Assigning to attribute %r not defined in class slots* Used when\nassigning to an attribute not defined in the class slots."},{"id":"PyLint_E0238","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"invalid-slots (E0238)","description":"Invalid __slots__ object. Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.","explanation":"# invalid-slots (E0238)\n\n*Invalid \\_\\_slots\\_\\_ object* Used when an invalid \\_\\_slots\\_\\_ is\nfound in class. Only a string, an iterable or a sequence is permitted."},{"id":"PyLint_E0239","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"inherit-non-class (E0239)","description":"Inheriting %r, which is not a class. Used when a class inherits from something which is not a class.","explanation":"# inherit-non-class (E0239)\n\n*Inheriting %r, which is not a class.* Used when a class inherits from\nsomething which is not a class."},{"id":"PyLint_E0240","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"inconsistent-mro (E0240)","description":"Inconsistent method resolution order for class %r. Used when a class has an inconsistent method resolution order.","explanation":"# inconsistent-mro (E0240)\n\n*Inconsistent method resolution order for class %r* Used when a class\nhas an inconsistent method resolution order."},{"id":"PyLint_E0241","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"duplicate-bases (E0241)","description":"Duplicate bases for class %r. Used when a class has duplicate bases.","explanation":"# duplicate-bases (E0241)\n\n*Duplicate bases for class %r* Used when a class has duplicate bases."},{"id":"PyLint_E0301","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"non-iterator-returned (E0301)","description":"__iter__ returns non-iterator. Used when an __iter__ method returns something which is not an iterable (i.e. has no __next__ method)","explanation":"# non-iterator-returned (E0301)\n\n*\\_\\_iter\\_\\_ returns non-iterator* Used when an \\_\\_iter\\_\\_ method\nreturns something which is not an iterable (i.e. has no \\_\\_next\\_\\_\nmethod)"},{"id":"PyLint_E0302","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"unexpected-special-method-signature (E0302)","description":"The special method %r expects %s param(s), %d %s given. Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.","explanation":"# unexpected-special-method-signature (E0302)\n\n*The special method %r expects %s param(s), %d %s given* Emitted when a\nspecial method was defined with an invalid number of parameters. If it\nhas too few or too many, it might not work at all."},{"id":"PyLint_E0303","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"invalid-length-returned (E0303)","description":"__len__ does not return non-negative integer. Used when an __len__ method returns something which is not a non-negative integer","explanation":"# invalid-length-returned (E0303)\n\n*\\_\\_len\\_\\_ does not return non-negative integer* Used when an\n\\_\\_len\\_\\_ method returns something which is not a non-negative integer"},{"id":"PyLint_E0402","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"relative-beyond-top-level (E0402)","description":"Attempted relative import beyond top-level package. Used when a relative import tries to access too many levels in the current package.","explanation":"# relative-beyond-top-level (E0402)\n\n*Attempted relative import beyond top-level package* Used when a\nrelative import tries to access too many levels in the current package."},{"id":"PyLint_E0601","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"used-before-assignment (E0601)","description":"Using variable %r before assignment. Used when a local variable is accessed before it’s assignment.","explanation":"# used-before-assignment (E0601)\n\n*Using variable %r before assignment* Used when a local variable is\naccessed before it’s assignment."},{"id":"PyLint_E0602","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"undefined-variable (E0602)","description":"Undefined variable %r. Used when an undefined variable is accessed.","explanation":"# undefined-variable (E0602)\n\n*Undefined variable %r* Used when an undefined variable is accessed."},{"id":"PyLint_E0603","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"undefined-all-variable (E0603)","description":"Undefined variable name %r in __all__. Used when an undefined variable name is referenced in __all__.","explanation":"# undefined-all-variable (E0603)\n\n*Undefined variable name %r in \\_\\_all\\_\\_* Used when an undefined\nvariable name is referenced in \\_\\_all\\_\\_."},{"id":"PyLint_E0604","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"invalid-all-object (E0604)","description":"Invalid object %r in __all__, must contain only strings. Used when an invalid (non-string) object occurs in __all__.","explanation":"# invalid-all-object (E0604)\n\n*Invalid object %r in \\_\\_all\\_\\_, must contain only strings* Used when\nan invalid (non-string) object occurs in \\_\\_all\\_\\_."},{"id":"PyLint_E0611","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"no-name-in-module (E0611)","description":"No name %r in module %r. Used when a name cannot be found in a module.","explanation":"# no-name-in-module (E0611)\n\n*No name %r in module %r* Used when a name cannot be found in a module."},{"id":"PyLint_E0632","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"unbalanced-tuple-unpacking (E0632)","description":"Possible unbalanced tuple unpacking with sequence%s: left side has %d label(s), right side has %d value(s). Used when there is an unbalanced tuple unpacking in assignment","explanation":"# unbalanced-tuple-unpacking (E0632)\n\n*Possible unbalanced tuple unpacking with sequence%s: left side has %d\nlabel(s), right side has %d value(s)* Used when there is an unbalanced\ntuple unpacking in assignment"},{"id":"PyLint_E0633","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"unpacking-non-sequence (E0633)","description":"Attempting to unpack a non-sequence%s. Used when something which is not a sequence is used in an unpack assignment","explanation":"# unpacking-non-sequence (E0633)\n\n*Attempting to unpack a non-sequence%s* Used when something which is not\na sequence is used in an unpack assignment"},{"id":"PyLint_E0701","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"bad-except-order (E0701)","description":"Bad except clauses order (%s). Used when except clauses are not in the correct order (from the more specific to the more generic). If you don’t fix the order, some exceptions may not be caught by the most specific handler.","explanation":"# bad-except-order (E0701)\n\n*Bad except clauses order (%s)* Used when except clauses are not in the\ncorrect order (from the more specific to the more generic). If you don’t\nfix the order, some exceptions may not be caught by the most specific\nhandler."},{"id":"PyLint_E0702","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"raising-bad-type (E0702)","description":"Raising %s while only classes or instances are allowed. Used when something which is neither a class, an instance or a string is raised (i.e. a TypeError will be raised).","explanation":"# raising-bad-type (E0702)\n\n*Raising %s while only classes or instances are allowed* Used when\nsomething which is neither a class, an instance or a string is raised\n(i.e. a TypeError will be raised)."},{"id":"PyLint_E0703","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"bad-exception-context (E0703)","description":"Exception context set to something which is not an exception, nor None. Used when using the syntax “raise … from …”, where the exception context is not an exception, nor None. This message can’t be emitted when using Python < 3.0.","explanation":"# bad-exception-context (E0703)\n\n*Exception context set to something which is not an exception, nor None*\nUsed when using the syntax “raise … from …”, where the exception context\nis not an exception, nor None. This message can’t be emitted when using\nPython \\< 3.0."},{"id":"PyLint_E0704","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"misplaced-bare-raise (E0704)","description":"The raise statement is not inside an except clause. Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.","explanation":"# misplaced-bare-raise (E0704)\n\n*The raise statement is not inside an except clause* Used when a bare\nraise is not used inside an except clause. This generates an error,\nsince there are no active exceptions to be reraised. An exception to\nthis rule is represented by a bare raise inside a finally clause, which\nmight work, as long as an exception is raised inside the try block, but\nit is nevertheless a code smell that must not be relied upon."},{"id":"PyLint_E0710","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"raising-non-exception (E0710)","description":"Raising a new style class which doesn’t inherit from BaseException. Used when a new style class which doesn’t inherit from BaseException is raised.","explanation":"# raising-non-exception (E0710)\n\n*Raising a new style class which doesn’t inherit from BaseException*\nUsed when a new style class which doesn’t inherit from BaseException is\nraised."},{"id":"PyLint_E0711","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"notimplemented-raised (E0711)","description":"NotImplemented raised - should raise NotImplementedError. Used when NotImplemented is raised instead of NotImplementedError","explanation":"# notimplemented-raised (E0711)\n\n*NotImplemented raised - should raise NotImplementedError* Used when\nNotImplemented is raised instead of NotImplementedError"},{"id":"PyLint_E0712","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"catching-non-exception (E0712)","description":"Catching an exception which doesn’t inherit from Exception: %s. Used when a class which doesn’t inherit from Exception is used as an exception in an except clause.","explanation":"# catching-non-exception (E0712)\n\n*Catching an exception which doesn’t inherit from Exception: %s* Used\nwhen a class which doesn’t inherit from Exception is used as an\nexception in an except clause."},{"id":"PyLint_E1001","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"slots-on-old-class (E1001)","description":"Use of __slots__ on an old style class. Used when an old style class uses the __slots__ attribute. This message can’t be emitted when using Python >= 3.0.","explanation":"# slots-on-old-class (E1001)\n\n*Use of \\_\\_slots\\_\\_ on an old style class* Used when an old style\nclass uses the \\_\\_slots\\_\\_ attribute. This message can’t be emitted\nwhen using Python \\>= 3.0."},{"id":"PyLint_E1002","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"super-on-old-class (E1002)","description":"Use of super on an old style class. Used when an old style class uses the super builtin. This message can’t be emitted when using Python >= 3.0.","explanation":"# super-on-old-class (E1002)\n\n*Use of super on an old style class* Used when an old style class uses\nthe super builtin. This message can’t be emitted when using Python \\>=\n3.0."},{"id":"PyLint_E1003","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"bad-super-call (E1003)","description":"Bad first argument %r given to super(). Used when another argument than the current class is given as first argument of the super builtin.","explanation":"# bad-super-call (E1003)\n\n*Bad first argument %r given to super()* Used when another argument than\nthe current class is given as first argument of the super builtin."},{"id":"PyLint_E1004","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"missing-super-argument (E1004)","description":"Missing argument to super(). Used when the super builtin didn’t receive an argument. This message can’t be emitted when using Python >= 3.0.","explanation":"# missing-super-argument (E1004)\n\n*Missing argument to super()* Used when the super builtin didn’t receive\nan argument. This message can’t be emitted when using Python \\>= 3.0."},{"id":"PyLint_E1101","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"no-member (E1101)","description":"%s %r has no %r member%s. Used when a variable is accessed for an unexistent member.","explanation":"# no-member (E1101)\n\n*%s %r has no %r member%s* Used when a variable is accessed for an\nunexistent member."},{"id":"PyLint_E1102","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"not-callable (E1102)","description":"%s is not callable. Used when an object being called has been inferred to a non callable object","explanation":"# not-callable (E1102)\n\n*%s is not callable* Used when an object being called has been inferred\nto a non callable object"},{"id":"PyLint_E1111","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"assignment-from-no-return (E1111)","description":"Assigning to function call which doesn’t return. Used when an assignment is done on a function call but the inferred function doesn’t return anything.","explanation":"# assignment-from-no-return (E1111)\n\n*Assigning to function call which doesn’t return* Used when an\nassignment is done on a function call but the inferred function doesn’t\nreturn anything."},{"id":"PyLint_E1120","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"no-value-for-parameter (E1120)","description":"No value for argument %s in %s call. Used when a function call passes too few arguments.","explanation":"# no-value-for-parameter (E1120)\n\n*No value for argument %s in %s call* Used when a function call passes\ntoo few arguments."},{"id":"PyLint_E1121","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"too-many-function-args (E1121)","description":"Too many positional arguments for %s call. Used when a function call passes too many positional arguments.","explanation":"# too-many-function-args (E1121)\n\n*Too many positional arguments for %s call* Used when a function call\npasses too many positional arguments."},{"id":"PyLint_E1123","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"unexpected-keyword-arg (E1123)","description":"Unexpected keyword argument %r in %s call. Used when a function call passes a keyword argument that doesn’t correspond to one of the function’s parameter names.","explanation":"# unexpected-keyword-arg (E1123)\n\n*Unexpected keyword argument %r in %s call* Used when a function call\npasses a keyword argument that doesn’t correspond to one of the\nfunction’s parameter names."},{"id":"PyLint_E1124","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"redundant-keyword-arg (E1124)","description":"Argument %r passed by position and keyword in %s call. Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.","explanation":"# redundant-keyword-arg (E1124)\n\n*Argument %r passed by position and keyword in %s call* Used when a\nfunction call would result in assigning multiple values to a function\nparameter, one value from a positional argument and one from a keyword\nargument."},{"id":"PyLint_E1125","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"missing-kwoa (E1125)","description":"Missing mandatory keyword argument %r in %s call. Used when a function call does not pass a mandatory keyword-only argument. This message can’t be emitted when using Python < 3.0.","explanation":"# missing-kwoa (E1125)\n\n*Missing mandatory keyword argument %r in %s call* Used when a function\ncall does not pass a mandatory keyword-only argument. This message can’t\nbe emitted when using Python \\< 3.0."},{"id":"PyLint_E1126","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"invalid-sequence-index (E1126)","description":"Sequence index is not an int, slice, or instance with __index__. Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.","explanation":"# invalid-sequence-index (E1126)\n\n*Sequence index is not an int, slice, or instance with \\_\\_index\\_\\_*\nUsed when a sequence type is indexed with an invalid type. Valid types\nare ints, slices, and objects with an \\_\\_index\\_\\_ method."},{"id":"PyLint_E1127","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"invalid-slice-index (E1127)","description":"Slice index is not an int, None, or instance with __index__. Used when a slice index is not an integer, None, or an object with an __index__ method.","explanation":"# invalid-slice-index (E1127)\n\n*Slice index is not an int, None, or instance with \\_\\_index\\_\\_* Used\nwhen a slice index is not an integer, None, or an object with an\n\\_\\_index\\_\\_ method."},{"id":"PyLint_E1128","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"assignment-from-none (E1128)","description":"Assigning to function call which only returns None. Used when an assignment is done on a function call but the inferred function returns nothing but None.","explanation":"# assignment-from-none (E1128)\n\n*Assigning to function call which only returns None* Used when an\nassignment is done on a function call but the inferred function returns\nnothing but None."},{"id":"PyLint_E1129","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"not-context-manager (E1129)","description":"Context manager ‘%s’ doesn’t implement __enter__ and __exit__. Used when an instance in a with statement doesn’t implement the context manager protocol(__enter__/__exit__).","explanation":"# not-context-manager (E1129)\n\n*Context manager ‘%s’ doesn’t implement \\_\\_enter\\_\\_ and \\_\\_exit\\_\\_.*\nUsed when an instance in a with statement doesn’t implement the context\nmanager protocol(\\_\\_enter\\_\\_/\\_\\_exit\\_\\_)."},{"id":"PyLint_E1130","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"invalid-unary-operand-type (E1130)","description":"Emitted when a unary operand is used on an object which does not support this. Type of operation","explanation":"# invalid-unary-operand-type (E1130)\n\nEmitted when a unary operand is used on an object which does not support\nthis type of operation"},{"id":"PyLint_E1131","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"unsupported-binary-operation (E1131)","description":"Emitted when a binary arithmetic operation between two operands is not. Supported.","explanation":"# unsupported-binary-operation (E1131)\n\nEmitted when a binary arithmetic operation between two operands is not\nsupported."},{"id":"PyLint_E1132","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"repeated-keyword (E1132)","description":"Got multiple values for keyword argument %r in function call. Emitted when a function call got multiple values for a keyword.","explanation":"# repeated-keyword (E1132)\n\n*Got multiple values for keyword argument %r in function call* Emitted\nwhen a function call got multiple values for a keyword."},{"id":"PyLint_E1133","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"not-an-iterable (E1133)","description":"Non-iterable value %s is used in an iterating context. Used when a non-iterable value is used in place where iterable is expected","explanation":"# not-an-iterable (E1133)\n\n*Non-iterable value %s is used in an iterating context* Used when a\nnon-iterable value is used in place where iterable is expected"}],"pagination":{"cursor":"MTAw","limit":100,"total":298}}
