{"data":[{"id":"PyLint_E1134","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"not-a-mapping (E1134)","description":"Non-mapping value %s is used in a mapping context. Used when a non-mapping value is used in place where mapping is expected","explanation":"# not-a-mapping (E1134)\n\n*Non-mapping value %s is used in a mapping context* Used when a\nnon-mapping value is used in place where mapping is expected"},{"id":"PyLint_E1135","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"unsupported-membership-test (E1135)","description":"Value ‘%s’ doesn’t support membership test. Emitted when an instance in membership test expression doesn’t implement membership protocol (__contains__/__iter__/__getitem__)","explanation":"# unsupported-membership-test (E1135)\n\n*Value ‘%s’ doesn’t support membership test* Emitted when an instance in\nmembership test expression doesn’t implement membership protocol\n(\\_\\_contains\\_\\_/\\_\\_iter\\_\\_/\\_\\_getitem\\_\\_)"},{"id":"PyLint_E1136","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"unsubscriptable-object (E1136)","description":"Value ‘%s’ is unsubscriptable. Emitted when a subscripted value doesn’t support subscription(i.e. doesn’t define __getitem__ method)","explanation":"# unsubscriptable-object (E1136)\n\n*Value ‘%s’ is unsubscriptable* Emitted when a subscripted value doesn’t\nsupport subscription(i.e. doesn’t define \\_\\_getitem\\_\\_ method)"},{"id":"PyLint_E1137","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"unsupported-assignment-operation (E1137)","description":"%r does not support item assignment. Emitted when an object does not support item assignment (i.e. doesn’t define __setitem__ method)","explanation":"# unsupported-assignment-operation (E1137)\n\n*%r does not support item assignment* Emitted when an object does not\nsupport item assignment (i.e. doesn’t define \\_\\_setitem\\_\\_ method)"},{"id":"PyLint_E1138","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"unsupported-delete-operation (E1138)","description":"%r does not support item deletion. Emitted when an object does not support item deletion (i.e. doesn’t define __delitem__ method)","explanation":"# unsupported-delete-operation (E1138)\n\n*%r does not support item deletion* Emitted when an object does not\nsupport item deletion (i.e. doesn’t define \\_\\_delitem\\_\\_ method)"},{"id":"PyLint_E1139","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"invalid-metaclass (E1139)","description":"Invalid metaclass %r used. Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.","explanation":"# invalid-metaclass (E1139)\n\n*Invalid metaclass %r used* Emitted whenever we can detect that a class\nis using, as a metaclass, something which might be invalid for using as\na metaclass."},{"id":"PyLint_E1200","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"logging-unsupported-format (E1200)","description":"Unsupported logging format character %r (%#02x) at index %d. Used when an unsupported format character is used in a logging statement format string.","explanation":"# logging-unsupported-format (E1200)\n\n*Unsupported logging format character %r (%\\#02x) at index %d* Used when\nan unsupported format character is used in a logging statement format\nstring."},{"id":"PyLint_E1201","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"logging-format-truncated (E1201)","description":"Logging format string ends in middle of conversion specifier. Used when a logging statement format string terminates before the end of a conversion specifier.","explanation":"# logging-format-truncated (E1201)\n\n*Logging format string ends in middle of conversion specifier* Used when\na logging statement format string terminates before the end of a\nconversion specifier."},{"id":"PyLint_E1205","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"logging-too-many-args (E1205)","description":"Too many arguments for logging format string. Used when a logging format string is given too many arguments.","explanation":"# logging-too-many-args (E1205)\n\n*Too many arguments for logging format string* Used when a logging\nformat string is given too many arguments."},{"id":"PyLint_E1206","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"logging-too-few-args (E1206)","description":"Not enough arguments for logging format string. Used when a logging format string is given too few arguments.","explanation":"# logging-too-few-args (E1206)\n\n*Not enough arguments for logging format string* Used when a logging\nformat string is given too few arguments."},{"id":"PyLint_E1300","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"bad-format-character (E1300)","description":"Unsupported format character %r (%#02x) at index %d. Used when a unsupported format character is used in a format string.","explanation":"# bad-format-character (E1300)\n\n*Unsupported format character %r (%\\#02x) at index %d* Used when a\nunsupported format character is used in a format string."},{"id":"PyLint_E1301","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"truncated-format-string (E1301)","description":"Format string ends in middle of conversion specifier. Used when a format string terminates before the end of a conversion specifier.","explanation":"# truncated-format-string (E1301)\n\n*Format string ends in middle of conversion specifier* Used when a\nformat string terminates before the end of a conversion specifier."},{"id":"PyLint_E1302","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"mixed-format-string (E1302)","description":"Mixing named and unnamed conversion specifiers in format string. Used when a format string contains both named (e.g. ‘%(foo)d’) and unnamed (e.g. ‘%d’) conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.","explanation":"# mixed-format-string (E1302)\n\n*Mixing named and unnamed conversion specifiers in format string* Used\nwhen a format string contains both named (e.g. ‘%(foo)d’) and unnamed\n(e.g. ‘%d’) conversion specifiers. This is also used when a named\nconversion specifier contains \\* for the minimum field width and/or\nprecision."},{"id":"PyLint_E1303","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"format-needs-mapping (E1303)","description":"Expected mapping for format string, not %s. Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.","explanation":"# format-needs-mapping (E1303)\n\n*Expected mapping for format string, not %s* Used when a format string\nthat uses named conversion specifiers is used with an argument that is\nnot a mapping."},{"id":"PyLint_E1304","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"missing-format-string-key (E1304)","description":"Missing key %r in format string dictionary. Used when a format string that uses named conversion specifiers is used with a dictionary that doesn’t contain all the keys required by the format string.","explanation":"# missing-format-string-key (E1304)\n\n*Missing key %r in format string dictionary* Used when a format string\nthat uses named conversion specifiers is used with a dictionary that\ndoesn’t contain all the keys required by the format string."},{"id":"PyLint_E1305","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"too-many-format-args (E1305)","description":"Too many arguments for format string. Used when a format string that uses unnamed conversion specifiers is given too many arguments.","explanation":"# too-many-format-args (E1305)\n\n*Too many arguments for format string* Used when a format string that\nuses unnamed conversion specifiers is given too many arguments."},{"id":"PyLint_E1306","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":true,"parameters":[],"title":"too-few-format-args (E1306)","description":"Not enough arguments for format string. Used when a format string that uses unnamed conversion specifiers is given too few arguments","explanation":"# too-few-format-args (E1306)\n\n*Not enough arguments for format string* Used when a format string that\nuses unnamed conversion specifiers is given too few arguments"},{"id":"PyLint_E1310","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"bad-str-strip-call (E1310)","description":"Suspicious argument in %s.%s call. The argument to a str.{l,r,}strip call contains a duplicate character,","explanation":"# bad-str-strip-call (E1310)\n\n*Suspicious argument in %s.%s call* The argument to a str.{l,r,}strip\ncall contains a duplicate character,"},{"id":"PyLint_E1601","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"print-statement (E1601)","description":"print statement used. Used when a print statement is used (print is a function in Python 3)","explanation":"# print-statement (E1601)\n\n*print statement used* Used when a print statement is used (print is a\nfunction in Python 3)"},{"id":"PyLint_E1602","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"parameter-unpacking (E1602)","description":"Parameter unpacking specified. Used when parameter unpacking is specified for a function(Python 3 doesn’t allow it)","explanation":"# parameter-unpacking (E1602)\n\n*Parameter unpacking specified* Used when parameter unpacking is\nspecified for a function(Python 3 doesn’t allow it)"},{"id":"PyLint_E1603","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"unpacking-in-except (E1603)","description":"Implicit unpacking of exceptions is not supported in Python 3. Python3 will not allow implicit unpacking of exceptions in except clauses. See http://www.python.org/dev/peps/pep-3110/","explanation":"# unpacking-in-except (E1603)\n\n*Implicit unpacking of exceptions is not supported in Python 3* Python3\nwill not allow implicit unpacking of exceptions in except clauses. See\n<http://www.python.org/dev/peps/pep-3110/>"},{"id":"PyLint_E1604","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"old-raise-syntax (E1604)","description":"Use raise ErrorClass(args) instead of raise ErrorClass, args. Used when the alternate raise syntax ‘raise foo, bar’ is used instead of ‘raise foo(bar)’.","explanation":"# old-raise-syntax (E1604)\n\n*Use raise ErrorClass(args) instead of raise ErrorClass, args.* Used\nwhen the alternate raise syntax ‘raise foo, bar’ is used instead of\n‘raise foo(bar)’."},{"id":"PyLint_E1605","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"backtick (E1605)","description":"Use of the `` operator. Used when the deprecated “``” (backtick) operator is used instead of the str() function.","explanation":"# backtick (E1605)\n\n*Use of the \\`\\` operator* Used when the deprecated “\\`\\`” (backtick)\noperator is used instead of the str() function."},{"id":"PyLint_E1606","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"long-suffix (E1606)","description":"Use of long suffix. Used when “l” or “L” is used to mark a long integer. This will not work in Python 3, since int and long types have merged. This message can’t be emitted when using Python >= 3.0.","explanation":"# long-suffix (E1606)\n\n*Use of long suffix* Used when “l” or “L” is used to mark a long\ninteger. This will not work in Python 3, since int and long types have\nmerged. This message can’t be emitted when using Python \\>= 3.0."},{"id":"PyLint_E1607","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"old-ne-operator (E1607)","description":"Use of the <> operator. Used when the deprecated “<>” operator is used instead of “!=”. This is removed in Python 3. This message can’t be emitted when using Python >= 3.0.","explanation":"# old-ne-operator (E1607)\n\n*Use of the \\<\\> operator* Used when the deprecated “\\<\\>” operator is\nused instead of “\\!=”. This is removed in Python 3. This message can’t\nbe emitted when using Python \\>= 3.0."},{"id":"PyLint_E1608","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"old-octal-literal (E1608)","description":"Use of old octal literal. Used when encountering the old octal syntax, removed in Python 3. To use the new syntax, prepend 0o on the number. This message can’t be emitted when using Python >= 3.0.","explanation":"# old-octal-literal (E1608)\n\n*Use of old octal literal* Used when encountering the old octal syntax,\nremoved in Python 3. To use the new syntax, prepend 0o on the number.\nThis message can’t be emitted when using Python \\>= 3.0."},{"id":"PyLint_E1609","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"import-star-module-level (E1609)","description":"Import * only allowed at module level. Used when the import star syntax is used somewhere else than the module level. This message can’t be emitted when using Python >= 3.0.","explanation":"# import-star-module-level (E1609)\n\n*Import \\* only allowed at module level* Used when the import star\nsyntax is used somewhere else than the module level. This message can’t\nbe emitted when using Python \\>= 3.0."},{"id":"PyLint_E1610","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"non-ascii-bytes-literal (E1610)","description":"Non-ascii bytes literals not supported in 3.x. Used when non-ascii bytes literals are found in a program. They are no longer supported in Python 3. This message can’t be emitted when using Python >= 3.0.","explanation":"# non-ascii-bytes-literal (E1610)\n\n*Non-ascii bytes literals not supported in 3.x* Used when non-ascii\nbytes literals are found in a program. They are no longer supported in\nPython 3. This message can’t be emitted when using Python \\>= 3.0."},{"id":"PyLint_E1611","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"invalid-unicode-literal (E1611)","description":"unicode raw string literals not supported in 3.x. Used when raw unicode literals are found in a program. They are no longer supported in Python 3. This message can’t be emitted when using Python >= 3.0.","explanation":"# invalid-unicode-literal (E1611)\n\n*unicode raw string literals not supported in 3.x* Used when raw unicode\nliterals are found in a program. They are no longer supported in Python\n3. This message can’t be emitted when using Python \\>= 3.0."},{"id":"PyLint_E1700","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"yield-inside-async-function (E1700)","description":"Yield inside async function. Used when an yield or yield from statement is found inside an async function. This message can’t be emitted when using Python < 3.5.","explanation":"# yield-inside-async-function (E1700)\n\n*Yield inside async function* Used when an yield or yield from statement\nis found inside an async function. This message can’t be emitted when\nusing Python \\< 3.5."},{"id":"PyLint_E1701","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"not-async-context-manager (E1701)","description":"Async context manager ‘%s’ doesn’t implement __aenter__ and __aexit__. Used when an async context manager is used with an object that does not implement the async context management protocol. This message can’t be emitted when using Python < 3.5.","explanation":"# not-async-context-manager (E1701)\n\n*Async context manager ‘%s’ doesn’t implement \\_\\_aenter\\_\\_ and\n\\_\\_aexit\\_\\_.* Used when an async context manager is used with an\nobject that does not implement the async context management protocol.\nThis message can’t be emitted when using Python \\< 3.5."},{"id":"PyLint_F0202","category":"CodeStyle","level":"Error","severityLevel":"Error","enabled":false,"parameters":[],"title":"method-check-failed (F0202)","description":"Unable to check methods signature (%s / %s). Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don’t make sense of it.","explanation":"# method-check-failed (F0202)\n\n*Unable to check methods signature (%s / %s)* Used when Pylint has been\nunable to check methods signature compatibility for an unexpected\nreason. Please report this kind if you don’t make sense of it."},{"id":"PyLint_I1101","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"c-extension-no-member (I1101)","description":"%s %r has not %r member%s, but source is unavailable. Consider adding this module to extension-pkg-whitelist if you want to perform analysis based on run-time introspection of living objects. Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.","explanation":"# c-extension-no-member (I1101)\n\n*%s %r has not %r member%s, but source is unavailable. Consider adding\nthis module to extension-pkg-whitelist if you want to perform analysis\nbased on run-time introspection of living objects.* Used when a variable\nis accessed for non-existent member of C extension. Due to\nunavailability of source static analysis is impossible, but it may be\nperformed by introspecting living objects in run-time."},{"id":"PyLint_R0123","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"literal-comparison (R0123)","description":"Comparison to literal. Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.","explanation":"# literal-comparison (R0123)\n\n*Comparison to literal* Used when comparing an object to a literal,\nwhich is usually what you do not want to do, since you can compare to a\ndifferent literal than what was expected altogether."},{"id":"PyLint_R0201","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":true,"parameters":[],"title":"no-self-use (R0201)","description":"Method could be a function. Used when a method doesn’t use its bound instance, and so could be written as a function.","explanation":"# no-self-use (R0201)\n\n*Method could be a function* Used when a method doesn’t use its bound\ninstance, and so could be written as a function."},{"id":"PyLint_R0202","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":true,"parameters":[],"title":"no-classmethod-decorator (R0202)","description":"Consider using a decorator instead of calling classmethod. Used when a class method is defined without using the decorator syntax.","explanation":"# no-classmethod-decorator (R0202)\n\n*Consider using a decorator instead of calling classmethod* Used when a\nclass method is defined without using the decorator syntax."},{"id":"PyLint_R0203","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":true,"parameters":[],"title":"no-staticmethod-decorator (R0203)","description":"Consider using a decorator instead of calling staticmethod. Used when a static method is defined without using the decorator syntax.","explanation":"# no-staticmethod-decorator (R0203)\n\n*Consider using a decorator instead of calling staticmethod* Used when a\nstatic method is defined without using the decorator syntax."},{"id":"PyLint_R0401","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"cyclic-import (R0401)","description":"Cyclic import (%s). Used when a cyclic import between two or more modules is detected.","explanation":"# cyclic-import (R0401)\n\n*Cyclic import (%s)* Used when a cyclic import between two or more\nmodules is detected."},{"id":"PyLint_R0801","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"duplicate-code (R0801)","description":"Similar lines in %s files. Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.","explanation":"# duplicate-code (R0801)\n\n*Similar lines in %s files* Indicates that a set of similar lines has\nbeen detected among multiple file. This usually means that the code\nshould be refactored to avoid this duplication."},{"id":"PyLint_R0901","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-many-ancestors (R0901)","description":"Too many ancestors (%s/%s). Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.","explanation":"# too-many-ancestors (R0901)\n\n*Too many ancestors (%s/%s)* Used when class has too many parent\nclasses, try to reduce this to get a simpler (and so easier to use)\nclass."},{"id":"PyLint_R0902","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-many-instance-attributes (R0902)","description":"Too many instance attributes (%s/%s). Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.","explanation":"# too-many-instance-attributes (R0902)\n\n*Too many instance attributes (%s/%s)* Used when class has too many\ninstance attributes, try to reduce this to get a simpler (and so easier\nto use) class."},{"id":"PyLint_R0903","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-few-public-methods (R0903)","description":"Too few public methods (%s/%s). Used when class has too few public methods, so be sure it’s really worth it.","explanation":"# too-few-public-methods (R0903)\n\n*Too few public methods (%s/%s)* Used when class has too few public\nmethods, so be sure it’s really worth it."},{"id":"PyLint_R0904","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-many-public-methods (R0904)","description":"Too many public methods (%s/%s). Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.","explanation":"# too-many-public-methods (R0904)\n\n*Too many public methods (%s/%s)* Used when class has too many public\nmethods, try to reduce this to get a simpler (and so easier to use)\nclass."},{"id":"PyLint_R0911","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-many-return-statements (R0911)","description":"Too many return statements (%s/%s). Used when a function or method has too many return statement, making it hard to follow.","explanation":"# too-many-return-statements (R0911)\n\n*Too many return statements (%s/%s)* Used when a function or method has\ntoo many return statement, making it hard to follow."},{"id":"PyLint_R0912","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-many-branches (R0912)","description":"Too many branches (%s/%s). Used when a function or method has too many branches, making it hard to follow.","explanation":"# too-many-branches (R0912)\n\n*Too many branches (%s/%s)* Used when a function or method has too many\nbranches, making it hard to follow."},{"id":"PyLint_R0913","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-many-arguments (R0913)","description":"Too many arguments (%s/%s). Used when a function or method takes too many arguments.","explanation":"# too-many-arguments (R0913)\n\n*Too many arguments (%s/%s)* Used when a function or method takes too\nmany arguments."},{"id":"PyLint_R0914","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[{"name":"max-locals","default":"15","description":"Maximum number of locals for function / method body."}],"title":"too-many-locals (R0914)","description":"Too many local variables (%s/%s). Used when a function or method has too many local variables.","explanation":"# too-many-locals (R0914)\n\n*Too many local variables (%s/%s)* Used when a function or method has\ntoo many local variables."},{"id":"PyLint_R0915","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-many-statements (R0915)","description":"Too many statements (%s/%s). Used when a function or method has too many statements. You should then split it in smaller functions / methods.","explanation":"# too-many-statements (R0915)\n\n*Too many statements (%s/%s)* Used when a function or method has too\nmany statements. You should then split it in smaller functions /\nmethods."},{"id":"PyLint_R0916","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-many-boolean-expressions (R0916)","description":"Too many boolean expressions in if statement (%s/%s). Used when a if statement contains too many boolean expressions","explanation":"# too-many-boolean-expressions (R0916)\n\n*Too many boolean expressions in if statement (%s/%s)* Used when a if\nstatement contains too many boolean expressions"},{"id":"PyLint_R1701","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"consider-merging-isinstance (R1701)","description":"Consider merging these isinstance calls to isinstance(%s, (%s)). Used when multiple consecutive isinstance calls can be merged into one.","explanation":"# consider-merging-isinstance (R1701)\n\n*Consider merging these isinstance calls to isinstance(%s, (%s))* Used\nwhen multiple consecutive isinstance calls can be merged into one."},{"id":"PyLint_R1702","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"too-many-nested-blocks (R1702)","description":"Too many nested blocks (%s/%s). Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.","explanation":"# too-many-nested-blocks (R1702)\n\n*Too many nested blocks (%s/%s)* Used when a function or a method has\ntoo many nested blocks. This makes the code less understandable and\nmaintainable."},{"id":"PyLint_R1703","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"simplifiable-if-statement (R1703)","description":"The if statement can be replaced with %s. Used when an if statement can be replaced with ‘bool(test)’.","explanation":"# simplifiable-if-statement (R1703)\n\n*The if statement can be replaced with %s* Used when an if statement can\nbe replaced with ‘bool(test)’."},{"id":"PyLint_R1704","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"redefined-argument-from-local (R1704)","description":"Redefining argument with the local name %r. Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.","explanation":"# redefined-argument-from-local (R1704)\n\n*Redefining argument with the local name %r* Used when a local name is\nredefining an argument, which might suggest a potential error. This is\ntaken in account only for a handful of name binding operations, such as\nfor iteration, with statement assignment and exception handler\nassignment."},{"id":"PyLint_R1705","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"no-else-return (R1705)","description":"Unnecessary “else” after “return”. Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.","explanation":"# no-else-return (R1705)\n\n*Unnecessary “else” after “return”* Used in order to highlight an\nunnecessary block of code following an if containing a return statement.\nAs such, it will warn when it encounters an else following a chain of\nifs, all of them containing a return statement."},{"id":"PyLint_R1706","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"consider-using-ternary (R1706)","description":"Consider using ternary (%s). Used when one of known pre-python 2.5 ternary syntax is used.","explanation":"# consider-using-ternary (R1706)\n\n*Consider using ternary (%s)* Used when one of known pre-python 2.5\nternary syntax is used."},{"id":"PyLint_R1707","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"trailing-comma-tuple (R1707)","description":"Disallow trailing comma tuple. In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple. This message can’t be emitted when using Python < 3.0.","explanation":"# trailing-comma-tuple (R1707)\n\n*Disallow trailing comma tuple* In Python, a tuple is actually created\nby the comma symbol, not by the parentheses. Unfortunately, one can\nactually create a tuple by misplacing a trailing comma, which can lead\nto potential weird bugs in your code. You should always use parentheses\nexplicitly for creating a tuple. This message can’t be emitted when\nusing Python \\< 3.0."},{"id":"PyLint_R1708","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"stop-iteration-return (R1708)","description":"Do not raise StopIteration in generator, use return statement instead. According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statement This message can’t be emitted when using Python < 3.0.","explanation":"# stop-iteration-return (R1708)\n\n*Do not raise StopIteration in generator, use return statement instead*\nAccording to PEP479, the raise of StopIteration to end the loop of a\ngenerator may lead to hard to find bugs. This PEP specify that raise\nStopIteration has to be replaced by a simple return statement This\nmessage can’t be emitted when using Python \\< 3.0."},{"id":"PyLint_R1709","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"simplify-boolean-expression (R1709)","description":"Boolean expression may be simplified to %s. Emitted when redundant pre-python 2.5 ternary syntax is used.","explanation":"# simplify-boolean-expression (R1709)\n\n*Boolean expression may be simplified to %s* Emitted when redundant\npre-python 2.5 ternary syntax is used."},{"id":"PyLint_R1710","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"inconsistent-return-statements (R1710)","description":"Either all return statements in a function should return an expression, or none of them should. According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable)","explanation":"# inconsistent-return-statements (R1710)\n\n*Either all return statements in a function should return an expression,\nor none of them should.* According to PEP8, if any return statement\nreturns an expression, any return statements where no value is returned\nshould explicitly state this as return None, and an explicit return\nstatement should be present at the end of the function (if reachable)"},{"id":"PyLint_W0101","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"unreachable (W0101)","description":"Unreachable code. Used when there is some code behind a “return” or “raise” statement, which will never be accessed.","explanation":"# unreachable (W0101)\n\n*Unreachable code* Used when there is some code behind a “return” or\n“raise” statement, which will never be accessed."},{"id":"PyLint_W0102","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"dangerous-default-value (W0102)","description":"Dangerous default value %s as argument. Used when a mutable value as list or dictionary is detected in a default value for an argument.","explanation":"# dangerous-default-value (W0102)\n\n*Dangerous default value %s as argument* Used when a mutable value as\nlist or dictionary is detected in a default value for an argument."},{"id":"PyLint_W0104","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"pointless-statement (W0104)","description":"Statement seems to have no effect. Used when a statement doesn’t have (or at least seems to) any effect.","explanation":"# pointless-statement (W0104)\n\n*Statement seems to have no effect* Used when a statement doesn’t have\n(or at least seems to) any effect."},{"id":"PyLint_W0105","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"pointless-string-statement (W0105)","description":"String statement has no effect. Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you’re using those strings as documentation, instead of comments.","explanation":"# pointless-string-statement (W0105)\n\n*String statement has no effect* Used when a string is used as a\nstatement (which of course has no effect). This is a particular case of\nW0104 with its own message so you can easily disable it if you’re using\nthose strings as documentation, instead of comments."},{"id":"PyLint_W0106","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"expression-not-assigned (W0106)","description":"Expression “%s” is assigned to nothing. Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.","explanation":"# expression-not-assigned (W0106)\n\n*Expression “%s” is assigned to nothing* Used when an expression that is\nnot a function call is assigned to nothing. Probably something else was\nintended."},{"id":"PyLint_W0107","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"unnecessary-pass (W0107)","description":"Unnecessary pass statement. Used when a “pass” statement that can be avoided is encountered.","explanation":"# unnecessary-pass (W0107)\n\n*Unnecessary pass statement* Used when a “pass” statement that can be\navoided is encountered."},{"id":"PyLint_W0108","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"unnecessary-lambda (W0108)","description":"Lambda may not be necessary. Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.","explanation":"# unnecessary-lambda (W0108)\n\n*Lambda may not be necessary* Used when the body of a lambda expression\nis a function call on the same argument list as the lambda itself; such\nlambda expressions are in all but a few cases replaceable with the\nfunction being called in the body of the lambda."},{"id":"PyLint_W0109","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"duplicate-key (W0109)","description":"Duplicate key %r in dictionary. Used when a dictionary expression binds the same key multiple times.","explanation":"# duplicate-key (W0109)\n\n*Duplicate key %r in dictionary* Used when a dictionary expression binds\nthe same key multiple times."},{"id":"PyLint_W0110","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"deprecated-lambda (W0110)","description":"map/filter on lambda could be replaced by comprehension. Used when a lambda is the first argument to “map” or “filter”. It could be clearer as a list comprehension or generator expression. This message can’t be emitted when using Python >= 3.0.","explanation":"# deprecated-lambda (W0110)\n\n*map/filter on lambda could be replaced by comprehension* Used when a\nlambda is the first argument to “map” or “filter”. It could be clearer\nas a list comprehension or generator expression. This message can’t be\nemitted when using Python \\>= 3.0."},{"id":"PyLint_W0111","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"assign-to-new-keyword (W0111)","description":"Name %s will become a keyword in Python %s. Used when assignment will become invalid in future Python release due to introducing new keyword","explanation":"# assign-to-new-keyword (W0111)\n\n*Name %s will become a keyword in Python %s* Used when assignment will\nbecome invalid in future Python release due to introducing new keyword"},{"id":"PyLint_W0120","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"useless-else-on-loop (W0120)","description":"Else clause on loop without a break statement. Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.","explanation":"# useless-else-on-loop (W0120)\n\n*Else clause on loop without a break statement* Loops should only have\nan else clause if they can exit early with a break statement, otherwise\nthe statements under else should be on the same scope as the loop\nitself."},{"id":"PyLint_W0122","category":"Security","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"exec-used (W0122)","subCategory":"CommandInjection","description":"Use of exec. Used when you use the “exec” statement (function for Python 3), to discourage its usage. That doesn’t mean you cannot use it !","explanation":"# exec-used (W0122)\n\n*Use of exec* Used when you use the “exec” statement (function for\nPython 3), to discourage its usage. That doesn’t mean you cannot use it\n\\!"},{"id":"PyLint_W0123","category":"Security","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"eval-used (W0123)","subCategory":"CommandInjection","description":"Use of eval. Used when you use the “eval” function, to discourage its usage. Consider using ast.literal_eval for safely evaluating strings containing Python expressions from untrusted sources.","explanation":"# eval-used (W0123)\n\n*Use of eval* Used when you use the “eval” function, to discourage its\nusage. Consider using ast.literal\\_eval for safely evaluating strings\ncontaining Python expressions from untrusted sources."},{"id":"PyLint_W0124","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"confusing-with-statement (W0124)","description":"Following “as” with another context manager looks like a tuple. Emitted when a with statement component returns multiple values and uses name binding with as only for a part of those values, as in with ctx() as a, b. This can be misleading, since it’s not clear if the context manager returns a tuple or if the node without a name binding is another context manager.","explanation":"# confusing-with-statement (W0124)\n\n*Following “as” with another context manager looks like a tuple.*\nEmitted when a with statement component returns multiple values and uses\nname binding with as only for a part of those values, as in with ctx()\nas a, b. This can be misleading, since it’s not clear if the context\nmanager returns a tuple or if the node without a name binding is another\ncontext manager."},{"id":"PyLint_W0125","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"using-constant-test (W0125)","description":"Using a conditional statement with a constant value. Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.","explanation":"# using-constant-test (W0125)\n\n*Using a conditional statement with a constant value* Emitted when a\nconditional statement (If or ternary if) uses a constant value for its\ntest. This might not be what the user intended to do."},{"id":"PyLint_W0150","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"lost-exception (W0150)","description":"%s statement in finally block may swallow exception. Used when a break or a return statement is found inside the finally clause of a try…finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.","explanation":"# lost-exception (W0150)\n\n*%s statement in finally block may swallow exception* Used when a break\nor a return statement is found inside the finally clause of a\ntry…finally block: the exceptions raised in the try clause will be\nsilently swallowed instead of being re-raised."},{"id":"PyLint_W0199","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"assert-on-tuple (W0199)","description":"Assert called on a 2-uple. Did you mean ‘assert x,y’?. A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.","explanation":"# assert-on-tuple (W0199)\n\n*Assert called on a 2-uple. Did you mean ‘assert x,y’?* A call of assert\non a tuple will always evaluate to true if the tuple is not empty, and\nwill always evaluate to false if it is."},{"id":"PyLint_W0201","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"attribute-defined-outside-init (W0201)","description":"Attribute %r defined outside __init__. Used when an instance attribute is defined outside the __init__ method.","explanation":"# attribute-defined-outside-init (W0201)\n\n*Attribute %r defined outside \\_\\_init\\_\\_* Used when an instance\nattribute is defined outside the \\_\\_init\\_\\_ method."},{"id":"PyLint_W0211","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"bad-staticmethod-argument (W0211)","description":"Static method with %r as first argument. Used when a static method has “self” or a value specified in valid- classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.","explanation":"# bad-staticmethod-argument (W0211)\n\n*Static method with %r as first argument* Used when a static method has\n“self” or a value specified in valid- classmethod-first-arg option or\nvalid-metaclass-classmethod-first-arg option as first argument."},{"id":"PyLint_W0212","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"protected-access (W0212)","description":"Access to a protected member %s of a client class. Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it’s defined.","explanation":"# protected-access (W0212)\n\n*Access to a protected member %s of a client class* Used when a\nprotected member (i.e. class member with a name beginning with an\nunderscore) is access outside the class or a descendant of the class\nwhere it’s defined."},{"id":"PyLint_W0221","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"arguments-differ (W0221)","description":"Parameters differ from %s %r method. Used when a method has a different number of arguments than in the implemented interface or in an overridden method.","explanation":"# arguments-differ (W0221)\n\n*Parameters differ from %s %r method* Used when a method has a different\nnumber of arguments than in the implemented interface or in an\noverridden method."},{"id":"PyLint_W0222","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"signature-differs (W0222)","description":"Signature differs from %s %r method. Used when a method signature is different than in the implemented interface or in an overridden method.","explanation":"# signature-differs (W0222)\n\n*Signature differs from %s %r method* Used when a method signature is\ndifferent than in the implemented interface or in an overridden method."},{"id":"PyLint_W0223","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"abstract-method (W0223)","description":"Method %r is abstract in class %r but is not overridden. Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.","explanation":"# abstract-method (W0223)\n\n*Method %r is abstract in class %r but is not overridden* Used when an\nabstract method (i.e. raise NotImplementedError) is not overridden in\nconcrete class."},{"id":"PyLint_W0231","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"super-init-not-called (W0231)","description":"__init__ method from base class %r is not called. Used when an ancestor class method has an __init__ method which is not called by a derived class.","explanation":"# super-init-not-called (W0231)\n\n*\\_\\_init\\_\\_ method from base class %r is not called* Used when an\nancestor class method has an \\_\\_init\\_\\_ method which is not called by\na derived class."},{"id":"PyLint_W0232","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"no-init (W0232)","description":"Class has no __init__ method. Used when a class has no __init__ method, neither its parent classes.","explanation":"# no-init (W0232)\n\n*Class has no \\_\\_init\\_\\_ method* Used when a class has no \\_\\_init\\_\\_\nmethod, neither its parent classes."},{"id":"PyLint_W0233","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"non-parent-init-called (W0233)","description":"__init__ method from a non direct base class %r is called. Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.","explanation":"# non-parent-init-called (W0233)\n\n*\\_\\_init\\_\\_ method from a non direct base class %r is called* Used\nwhen an \\_\\_init\\_\\_ method is called on a class which is not in the\ndirect ancestors for the analysed class."},{"id":"PyLint_W0235","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"useless-super-delegation (W0235)","description":"Useless super delegation in method %r. Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.","explanation":"# useless-super-delegation (W0235)\n\n*Useless super delegation in method %r* Used whenever we can detect that\nan overridden method is useless, relying on super() delegation to do the\nsame thing as another method from the MRO."},{"id":"PyLint_W0301","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"unnecessary-semicolon (W0301)","description":"Unnecessary semicolon. Used when a statement is ended by a semi-colon (“;”), which isn’t necessary (that’s python, not C ;).","explanation":"# unnecessary-semicolon (W0301)\n\n*Unnecessary semicolon* Used when a statement is ended by a semi-colon\n(“;”), which isn’t necessary (that’s python, not C ;)."},{"id":"PyLint_W0311","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"bad-indentation (W0311)","description":"Bad indentation. Found %s %s, expected %s. Used when an unexpected number of indentation’s tabulations or spaces has been found.","explanation":"# bad-indentation (W0311)\n\n*Bad indentation. Found %s %s, expected %s* Used when an unexpected\nnumber of indentation’s tabulations or spaces has been found."},{"id":"PyLint_W0312","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"mixed-indentation (W0312)","description":"Found indentation with %ss instead of %ss. Used when there are some mixed tabs and spaces in a module.","explanation":"# mixed-indentation (W0312)\n\n*Found indentation with %ss instead of %ss* Used when there are some\nmixed tabs and spaces in a module."},{"id":"PyLint_W0332","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"lowercase-l-suffix (W0332)","description":"Use of “l” as long integer identifier. Used when a lower case “l” is used to mark a long integer. You should use a upper case “L” since the letter “l” looks too much like the digit “1” This message can’t be emitted when using Python >= 3.0.","explanation":"# lowercase-l-suffix (W0332)\n\n*Use of “l” as long integer identifier* Used when a lower case “l” is\nused to mark a long integer. You should use a upper case “L” since the\nletter “l” looks too much like the digit “1” This message can’t be\nemitted when using Python \\>= 3.0."},{"id":"PyLint_W0401","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"wildcard-import (W0401)","description":"Wildcard import %s. Used when from module import * is detected.","explanation":"# wildcard-import (W0401)\n\n*Wildcard import %s* Used when from module import \\* is detected."},{"id":"PyLint_W0402","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"deprecated-module (W0402)","description":"Uses of a deprecated module %r. Used a module marked as deprecated is imported.","explanation":"# deprecated-module (W0402)\n\n*Uses of a deprecated module %r* Used a module marked as deprecated is\nimported."},{"id":"PyLint_W0403","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"relative-import (W0403)","description":"Relative import %r, should be %r. Used when an import relative to the package directory is detected. This message can’t be emitted when using Python >= 3.0.","explanation":"# relative-import (W0403)\n\n*Relative import %r, should be %r* Used when an import relative to the\npackage directory is detected. This message can’t be emitted when using\nPython \\>= 3.0."},{"id":"PyLint_W0404","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"reimported (W0404)","description":"Reimport %r (imported line %s). Used when a module is reimported multiple times.","explanation":"# reimported (W0404)\n\n*Reimport %r (imported line %s)* Used when a module is reimported\nmultiple times."},{"id":"PyLint_W0406","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"import-self (W0406)","description":"Module import itself. Used when a module is importing itself.","explanation":"# import-self (W0406)\n\n*Module import itself* Used when a module is importing itself."},{"id":"PyLint_W0410","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"misplaced-future (W0410)","description":"__future__ import is not the first non docstring statement. Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.","explanation":"# misplaced-future (W0410)\n\n*\\_\\_future\\_\\_ import is not the first non docstring statement* Python\n2.5 and greater require \\_\\_future\\_\\_ import to be the first non\ndocstring statement in the module."},{"id":"PyLint_W0511","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"fixme (W0511)","description":"Used when a warning note as FIXME or XXX is detected.","explanation":"# fixme (W0511)\n\nUsed when a warning note as FIXME or XXX is detected."},{"id":"PyLint_W0512","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"invalid-encoded-data (W0512)","description":"Cannot decode using encoding “%s”, unexpected byte at position %d. Used when a source line cannot be decoded using the specified source file encoding. This message can’t be emitted when using Python >= 3.0.","explanation":"# invalid-encoded-data (W0512)\n\n*Cannot decode using encoding “%s”, unexpected byte at position %d* Used\nwhen a source line cannot be decoded using the specified source file\nencoding. This message can’t be emitted when using Python \\>= 3.0."},{"id":"PyLint_W0601","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"global-variable-undefined (W0601)","description":"Global variable %r undefined at the module level. Used when a variable is defined through the “global” statement but the variable is not defined in the module scope.","explanation":"# global-variable-undefined (W0601)\n\n*Global variable %r undefined at the module level* Used when a variable\nis defined through the “global” statement but the variable is not\ndefined in the module scope."},{"id":"PyLint_W0602","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":true,"parameters":[],"title":"global-variable-not-assigned (W0602)","description":"Using global for %r but no assignment is done. Used when a variable is defined through the “global” statement but no assignment to this variable is done.","explanation":"# global-variable-not-assigned (W0602)\n\n*Using global for %r but no assignment is done* Used when a variable is\ndefined through the “global” statement but no assignment to this\nvariable is done."}],"pagination":{"cursor":"MjAw","limit":100,"total":298}}
