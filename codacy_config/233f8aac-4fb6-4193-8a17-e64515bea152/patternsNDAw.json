{"data":[{"id":"shellcheck_SC3047","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"In POSIX sh, trapping ERR is undefined.","description":"In POSIX sh, trapping ERR is undefined.","explanation":"## In POSIX sh, trapping ERR is undefined.\n\n(or \"In dash, ... is not supported.\" when using `dash`)\n\nAlso applies to RETURN and DEBUG.\n\n### Problematic code:\n\n```sh\n#!/bin/sh\ntrap 'Command failed with $?' ERR\n```\n\n### Correct code:\n\nSwitch to a shell like `ksh` or `bash` that *does* support the kind of trap you want:\n\n```sh\n#!/bin/bash\ntrap 'Command failed with $?' ERR\n```\n\nOtherwise, rewrite the script to not rely on the trap.\n\n### Rationale:\n\nYou are trying to install a trap that is not supported by your current shell (`dash` or POSIX `sh`). There is no simple replacement. The script should be rewritten to avoid depending on the trap, or simply be run with a shell that supports it.\n\n### Exceptions:\n\nIf you only intend to target shells that supports this feature, you can change\nthe shebang to a shell that guarantees support, or [[ignore]] this warning.\n\nYou can use `# shellcheck disable=SC3000-SC4000` to ignore all such compatibility\nwarnings.\n\n### Related resources:\n\n* Help by adding links to BashFAQ, StackOverflow, man pages, POSIX, etc!\n\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3047)"},{"id":"shellcheck_SC3048","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"In POSIX sh, prefixing signal names with 'SIG' is undefined.","description":"In POSIX sh, prefixing signal names with 'SIG' is undefined.","explanation":"## In POSIX sh, prefixing signal names with 'SIG' is undefined.\n\n(or \"In dash, ... is not supported.\" when using `dash`)\n\n### Problematic code:\n\n```sh\ntrap 'handle_interrupt' SIGINT\n```\n\n### Correct code:\n\n```sh\ntrap 'handle_interrupt' INT\n```\n\n### Rationale:\n\nPOSIX does not allow specifying the \"SIG\" prefix of a signal name like \"INT\". Bash and Ksh supports this as an extension.\n\nSimply remove the \"SIG\" from the signal name. \n\n### Exceptions:\n\nNone\n\n### Related resources:\n\n* Help by adding links to BashFAQ, StackOverflow, man pages, POSIX, etc!\n\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3048)"},{"id":"shellcheck_SC3049","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"In POSIX sh, using lower/mixed case for signal names is undefined.","description":"In POSIX sh, using lower/mixed case for signal names is undefined.","explanation":"## In POSIX sh, using lower/mixed case for signal names is undefined.\n\n### Problematic code:\n\n```sh\ntrap 'handle_sigint' int\n```\n\n### Correct code:\n\n```sh\ntrap 'handle_sigint' INT\n```\n\n### Rationale:\n\nPOSIX requires that signal names [be given in uppercase](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_28):\n\n>The condition can be EXIT, 0 (equivalent to EXIT), or a signal specified using a symbolic name, without the SIG prefix, as listed in the tables of signal names in the <signal.h> header defined in XBD Headers; for example, HUP, INT, QUIT, TERM. Implementations may permit names with the SIG prefix or ignore case in signal names as an extension. \n\n### Exceptions:\n\nNone\n\n\n### Related resources:\n\n* Help by adding links to BashFAQ, StackOverflow, man pages, POSIX, etc!\n\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3049)"},{"id":"shellcheck_SC3050","category":"CodeStyle","level":"Warning","severityLevel":"Warning","enabled":false,"parameters":[],"title":"In POSIX sh, `printf %q` is undefined.","description":"In POSIX sh, `printf %q` is undefined.","explanation":"## In POSIX sh, `printf %q` is undefined.\n\n(or \"In dash, ... is not supported.\" when using `dash`)\n\n### Problematic code:\n\n```sh\nssh host \"cat $(printf \"%q\" \"$remotefile\")\"\n```\n\n### Correct code:\n\nThere is not really a good, built-in way to escape a string for a remote shell in POSIX sh. However, you can replace each `'` in the input with `'\\''` and then wrap the whole results in single quotes:\n\n```sh\nescape() { printf \"'%s'\\\\n\" \"$(printf '%s' \"$1\" | sed -e \"s/'/'\\\\\\\\''/g\")\"; }\nssh host \"cat $(escape \"$remotefile\")\"\n```\n\nAlternatively, switch to a shell that *does* support `printf %q` like `ksh` or `bash`.\n\n### Rationale:\n\n`printf %q` is a bash and ksh extension. It's not supported on POSIX sh or dash.\n\n### Exceptions:\n\nIf the command is gated by a check for the correct shell, you can [[ignore]] this warning.\n\n### Related resources:\n\n* Help by adding links to BashFAQ, StackOverflow, man pages, POSIX, etc!\n\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3050)"},{"id":"shellcheck_SC3053","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"In POSIX sh, indirect expansion is undefined.","description":"In POSIX sh, indirect expansion is undefined.","explanation":"## In POSIX sh, indirect expansion is undefined.\n\n(or \"In dash, ... is not supported.\" when using `dash`)\n\n### Problematic code:\n\n```sh\n#!/bin/sh\nname=\"PATH\"\necho \"${!name}\"\n```\n\n### Correct code:\n\nThe easiest solution is to switch to a shell that does support indirect expansion, like `bash`:\n\n```sh\n#!/bin/bash\nname=\"PATH\"\necho \"${!name}\"\n```\n\nAlternatively, carefully rewrite using `eval`:\n\n```sh\n#!/bin/sh\nname=PATH\neval \"echo \\\"\\$$name\\\"\"\n```\n\n### Rationale:\n\nIndirection expansion is an extension in `bash` and `ksh`, and not supported in `dash` or POSIX `sh`. Either switch to a shell that supports them, or write around it with careful use of `eval`. Take care to validate the variable name to avoid fragility and code injection.\n\n### Exceptions:\n\nIf you only intend to target shells that supports this feature, you can change\nthe shebang to a shell that guarantees support, or [[ignore]] this warning.\n\nYou can use `# shellcheck disable=SC3000-SC4000` to ignore all such compatibility\nwarnings.\n\n### Related resources:\n\n* Help by adding links to BashFAQ, StackOverflow, man pages, POSIX, etc!\n\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3053)"},{"id":"shellcheck_SC3054","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"In POSIX sh, array references are undefined.","description":"In POSIX sh, array references are undefined.","explanation":"## In POSIX sh, array references are undefined.\n\n(or \"In dash, ... are not supported.\" when using `dash`)\n\n### Problematic code:\n\n```sh\n#!/bin/sh\nvar=(foo bar)\necho \"${var[1]}\"\n```\n\n### Correct code:\n\nThe easiest solution is to switch to a shell that does support arrays, like `bash`:\n\n```sh\n#!/bin/bash\nvar=(foo bar)\necho \"${var[1]}\"\n```\n\nAlternatively, rewrite the logic to use e.g. indirect variable references or `set`:\n\n```sh\n#!/bin/sh\nset -- foo bar\necho \"$2\"\n```\n\n### Rationale:\n\nArrays are supported in `bash` and `ksh`, but not in `dash` or POSIX `sh`. Either switch to a shell that supports them, or rewrite your script without relying on arrays. This may not be straight forward.\n\n### Exceptions:\n\nIf you only intend to target shells that supports this feature, you can change\nthe shebang to a shell that guarantees support, or [[ignore]] this warning.\n\nYou can use `# shellcheck disable=SC3000-SC4000` to ignore all such compatibility\nwarnings.\n\n### Related resources:\n\n* Help by adding links to BashFAQ, StackOverflow, man pages, POSIX, etc!\n\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3054)"},{"id":"shellcheck_SC3055","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"In POSIX sh, array key expansion is undefined.","description":"In POSIX sh, array key expansion is undefined.","explanation":"## In POSIX sh, array key expansion is undefined.\nSee similar array warning [[SC3054]].\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3055)"},{"id":"shellcheck_SC3056","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"In POSIX sh, name matching prefixes are undefined.","description":"In POSIX sh, name matching prefixes are undefined.","explanation":"## In POSIX sh, name matching prefixes are undefined.\n\n(or \"In dash, ... are not supported.\" when using `dash`)\n\n### Problematic code:\n\n```sh\n#!/bin/sh\necho \"${!ANDROID_*}\"\n```\n\n### Correct code:\n\nThe easiest solution is to switch to a shell that *does* support name matching prefixes, like `bash`:\n\n```sh\n#!/bin/bash\necho \"${!ANDROID_*}\"\n```\n\nAlternatively, extract the data you want from `env` or `set`\n\n### Rationale:\n\nUsing `${!name*}` to find all variable names with a given prefix is a bash and ksh extension that `dash` and POSIX `sh` does not support.\n\n### Exceptions:\n\nIf you only intend to target shells that supports this feature, you can change\nthe shebang to a shell that guarantees support, or [[ignore]] this warning.\n\nYou can use `# shellcheck disable=SC3000-SC4000` to ignore all such compatibility\nwarnings.\n\n### Related resources:\n\n* Help by adding links to BashFAQ, StackOverflow, man pages, POSIX, etc!\n\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3056)"},{"id":"shellcheck_SC3057","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"In POSIX sh, string indexing is undefined.","description":"In POSIX sh, string indexing is undefined.","explanation":"## In POSIX sh, string indexing is undefined.\n\n(or \"In dash, ... is not supported.\" when using `dash`)\n\n### Problematic code:\n\n```sh\n#!/bin/sh\necho \"Your initial is ${USER:0:1}\"\n```\n\n### Correct code:\n\nEither switch to a shell that does support string indexing via parameter expansion, like `bash` or `ksh`, or rewrite with `cut`:\n\n```sh\n#!/bin/sh\necho \"Your initial is $(printf '%s' \"$USER\" | cut -c 1)\"\n```\n\n### Rationale:\n\nString indexing is a bash and ksh extension, and does not work in `dash` or POSIX `sh`.\n\n### Exceptions:\n\nIf you only intend to target shells that supports this feature, you can change\nthe shebang to a shell that guarantees support, or [[ignore]] this warning.\n\nYou can use `# shellcheck disable=SC3000-SC4000` to ignore all such compatibility\nwarnings.\n\n### Related resources:\n\n* Help by adding links to BashFAQ, StackOverflow, man pages, POSIX, etc!\n\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3057)"},{"id":"shellcheck_SC3059","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"Case modification is not supported in dash and undefined in POSIX sh.","description":"Case modification is not supported in dash and undefined in POSIX sh.","explanation":"Case modification is not supported in dash and undefined in POSIX sh.\n\nhttps://github.com/sbaudoin/sonar-shellcheck/blob/master/src/main/scripts/build_checks.yml\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3059)"},{"id":"shellcheck_SC3060","category":"CodeStyle","level":"Info","severityLevel":"Info","enabled":false,"parameters":[],"title":"In POSIX sh, string replacement is undefined.","description":"In POSIX sh, string replacement is undefined.","explanation":"## In POSIX sh, string replacement is undefined.\n\n(or \"In dash, ... is not supported.\" when using `dash`)\n\n### Problematic code:\n\n```sh\n#!/bin/sh\necho \"${var//foo/bar}\"\n```\n\n### Correct code:\n\nEither switch the shebang to `bash` or `ksh`, or rewrite the expansion using a tool like `sed`:\n\n```sh\n#!/bin/sh\necho \"$var\" | sed 's/foo/bar/g'\n```\n\n### Rationale:\n\nString replacement in parameter expansion is a `bash` and `ksh` extension. `dash` and POSIX `sh` does not support it.\n\n### Exceptions:\n\nIf you only intend to target shells that supports this feature, you can change\nthe shebang to a shell that guarantees support, or [[ignore]] this warning.\n\nYou can use `# shellcheck disable=SC3000-SC4000` to ignore all such compatibility\nwarnings.\n\n### Related resources:\n\n* Help by adding links to BashFAQ, StackOverflow, man pages, POSIX, etc!\n\n[Source](https://github.com/koalaman/shellcheck/wiki/SC3060)"}],"pagination":{"limit":100,"total":411}}